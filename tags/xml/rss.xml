<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>xml on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/xml/</link><description>Recent content in xml on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 19 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/xml/rss.xml" rel="self" type="application/rss+xml"/><item><title>Stupid Pacemaker XML tricks</title><link>https://blog.oddbit.com/posts/stupid-pacemaker-xml-tricks/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/posts/stupid-pacemaker-xml-tricks/</guid><description>I&amp;rsquo;ve recently spent some time working with Pacemaker, and ended up with an interesting collection of XPath snippets that I am publishing here for your use and/or amusement.
Check if there are any inactive resources pcs status xml | xmllint --xpath '//resource[@active=&amp;quot;false&amp;quot;]' - &amp;gt;&amp;amp;/dev/null &amp;amp;&amp;amp; echo &amp;quot;There are inactive resources&amp;quot; This selects any resource (//resource) in the output of pcs status xml that has the attribute active set to false. If there are no matches to this query, xmllint exits with an error code.</description><content>&lt;p>I&amp;rsquo;ve recently spent some time working with &lt;a href="http://clusterlabs.org/">Pacemaker&lt;/a>, and ended up
with an interesting collection of &lt;a href="http://www.w3.org/TR/xpath/">XPath&lt;/a> snippets that I am publishing
here for your use and/or amusement.&lt;/p>
&lt;h2 id="check-if-there-are-any-inactive-resources">Check if there are any inactive resources&lt;/h2>
&lt;pre>&lt;code>pcs status xml |
xmllint --xpath '//resource[@active=&amp;quot;false&amp;quot;]' - &amp;gt;&amp;amp;/dev/null &amp;amp;&amp;amp;
echo &amp;quot;There are inactive resources&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This selects &lt;em>any&lt;/em> resource (&lt;code>//resource&lt;/code>) in the output of &lt;code>pcs status xml&lt;/code> that has the attribute &lt;code>active&lt;/code> set to &lt;code>false&lt;/code>. If there
are no matches to this query, &lt;code>xmllint&lt;/code> exits with an error code.&lt;/p>
&lt;h2 id="get-a-list-of-inactive-resources">Get a list of inactive resources&lt;/h2>
&lt;pre>&lt;code>pcs status xml |
xmllint --xpath '//resource[@active=&amp;quot;false&amp;quot;]/@id' - |
tr ' ' '\n' |
cut -f2 -d'&amp;quot;'
&lt;/code>&lt;/pre>
&lt;p>This uses the same xpath query as the previous snippet, but here we
then extract the &lt;code>id&lt;/code> attribute of the matches and then print out all
the resulting ids, one per line.&lt;/p>
&lt;h2 id="check-if-there-are-no-inactive-resources">Check if there are &lt;em>no&lt;/em> inactive resources&lt;/h2>
&lt;pre>&lt;code>! pcs status xml |
xmllint --xpath '//resource[@active=&amp;quot;false&amp;quot;]' - &amp;amp;&amp;amp;
echo &amp;quot;There are no inactive resources&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This is the opposite of our earlier snippet, and demonstrates the use
of &lt;code>!&lt;/code> in a shell script to negate the success/failure of a shell
pipeline.&lt;/p>
&lt;h2 id="check-top-level-resources">Check top-level resources&lt;/h2>
&lt;pre>&lt;code>tmpfile=$(mktemp xmlXXXXXX)
trap &amp;quot;rm -f $tmpfile&amp;quot; EXIT
pcs status xml &amp;gt; $tmpfile
xmllint --xpath '/crm_mon/resources/*/@id' $tmpfile |
tr ' ' '\n'| cut -f2 -d'&amp;quot;' |
while read id; do
[ &amp;quot;$id&amp;quot; ] || continue
if ! xmllint --xpath &amp;quot;
/crm_mon/resources/*[@id='$id' and @active='true']|
/crm_mon/resources/*[@id='$id']/*[@active='true']&amp;quot; \
$tmpfile &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then
echo &amp;quot;$id: no active resources&amp;quot; &amp;gt;&amp;amp;2
exit 1
fi
done
&lt;/code>&lt;/pre>
&lt;p>This snippet checks that each top-level resource or resource container
(clone, resource group, etc.) has at least one active resources.
First we extract the &lt;code>id&lt;/code> attribute from the just the top-level
contents of &lt;code>/cr_mon/resources&lt;/code>:&lt;/p>
&lt;pre>&lt;code>/crm_mon/resources/*/@id
&lt;/code>&lt;/pre>
&lt;p>And then we iterate over the extracted ids, and for each one, we check
if either (a) a resource with that id is active, or (b) if any child
of a resource with that id is active:&lt;/p>
&lt;pre>&lt;code>/crm_mon/resources/*[@id='$id' and @active='true']|
/crm_mon/resources/*[@id='$id']/*[@active='true']
&lt;/code>&lt;/pre>
&lt;h1 id="wait-for-all-resources-to-become-inactive">Wait for all resources to become inactive&lt;/h1>
&lt;pre>&lt;code>pcs set property stop-all-resources=true
while pcs status xml |
xmllint --xpath '//resource[@active=&amp;quot;true&amp;quot;]' -; do
sleep 1
done
&lt;/code>&lt;/pre>
&lt;p>This is a good way to programatically wait for Pacemaker to finish
responding to setting &lt;code>stop-all-resources=true&lt;/code>.&lt;/p>
&lt;h1 id="get-a-list-of-all-top-level-resources">Get a list of all top-level resources&lt;/h1>
&lt;pre>&lt;code>cibadmin -Q |
xmllint --xpath '/cib/configuration/resources/*/@id' - |
tr ' ' '\n' |
cut -f2 -d'&amp;quot;'
&lt;/code>&lt;/pre>
&lt;p>This generates a list of the ids of &amp;ldquo;top-level&amp;rdquo; resources (either
standalone resources, or resource containers such as groups or
clones).&lt;/p>
&lt;h1 id="wait-for-all-members-of-a-resource-container-to-become-active">Wait for all members of a resource container to become active&lt;/h1>
&lt;pre>&lt;code>id='neutron-scale-clone'
while pcs status xml |
xmllint --xpath &amp;quot;//clone[@id='$id']/resource[@active='false']&amp;quot; -; do
sleep 1
done
&lt;/code>&lt;/pre>
&lt;p>This waits until all children of the specified resource id become
active.&lt;/p></content></item><item><title>Parsing XML with Awk</title><link>https://blog.oddbit.com/posts/awk-parsing-xml/</link><pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/posts/awk-parsing-xml/</guid><description>Recently, changes from the xmlgawk project have been integrated into GNU awk, and xmlgawk has been renamed to gawkextlib. With both a recent (post-4.0.70) gawk and gawkextlib built and installed correctly, you can write simple XML parsing scripts using gawk.
For example, let&amp;rsquo;s say you would like to generate a list of disk image files associated with a KVM virtual instance. You can use the virsh dumpxml command to get output like the following:</description><content>&lt;p>Recently, changes from the &lt;a href="http://gawkextlib.sourceforge.net/">xmlgawk&lt;/a> project have been integrated into
&lt;a href="https://www.gnu.org/software/gawk/">GNU awk&lt;/a>, and xmlgawk has been renamed to &lt;a href="http://gawkextlib.sourceforge.net/">gawkextlib&lt;/a>. With both a
recent (post-4.0.70) gawk and gawkextlib built and installed
correctly, you can write simple XML parsing scripts using gawk.&lt;/p>
&lt;p>For example, let&amp;rsquo;s say you would like to generate a list of disk image
files associated with a KVM virtual instance. You can use the &lt;code>virsh dumpxml&lt;/code> command to get output like the following:&lt;/p>
&lt;pre>&lt;code>&amp;lt;devices&amp;gt;
&amp;lt;emulator&amp;gt;/usr/bin/qemu-kvm&amp;lt;/emulator&amp;gt;
&amp;lt;disk type='file' device='disk'&amp;gt;
&amp;lt;driver name='qemu' type='qcow2'/&amp;gt;
&amp;lt;source file='/var/lib/libvirt/images/client.qcow2'/&amp;gt;
&amp;lt;target dev='sda' bus='ide'/&amp;gt;
&amp;lt;alias name='ide0-0-0'/&amp;gt;
&amp;lt;address type='drive' controller='0' bus='0' unit='0'/&amp;gt;
&amp;lt;/disk&amp;gt;
...
&amp;lt;/devices&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>You could then write code similar to &lt;a href="https://gist.github.com/4012705">the
following&lt;/a> to extract the relevant
information:&lt;/p>
&lt;pre>&lt;code>@load &amp;quot;xml&amp;quot;
XMLSTARTELEM == &amp;quot;disk&amp;quot; {
in_disk=1
disk_file=&amp;quot;&amp;quot;
disk_target=&amp;quot;&amp;quot;
}
in_disk == 1 &amp;amp;&amp;amp; XMLSTARTELEM == &amp;quot;source&amp;quot; {
disk_file=XMLATTR[&amp;quot;file&amp;quot;]
}
in_disk == 1 &amp;amp;&amp;amp; XMLSTARTELEM == &amp;quot;target&amp;quot; {
disk_target=XMLATTR[&amp;quot;dev&amp;quot;]
}
XMLENDELEM == &amp;quot;disk&amp;quot; {
in_disk=0
print disk_target, disk_file
}
&lt;/code>&lt;/pre>
&lt;p>Given the sample input above, the script will produce the following
output:&lt;/p>
&lt;pre>&lt;code>sda /var/lib/libvirt/images/client.qcow2
&lt;/code>&lt;/pre>
&lt;p>The xml extension for gawk populates a number of variables that
can be used in your scripts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>XMLSTARTELEM&lt;/code> marks the start of a new element (and is set to the
name of that element).&lt;/li>
&lt;li>&lt;code>XMLATTR&lt;/code> is available when &lt;code>XMLSTARTELEM&lt;/code> is set and contains the
element attributes.&lt;/li>
&lt;li>&lt;code>XMLENDELEM&lt;/code> marks the end of an element (and is set to the name of
the element).&lt;/li>
&lt;/ul>
&lt;p>There are other variables available, but with this basic set is
becomes easy to extract information from XML documents.&lt;/p></content></item><item><title>MBTA realtime XML feed</title><link>https://blog.oddbit.com/posts/mbta-realtime-xml-feed/</link><pubDate>Sun, 07 Feb 2010 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/posts/mbta-realtime-xml-feed/</guid><description>The MBTA has a trial web service interface that provides access to realtime location information for select MBTA buses, as well as access to route information, arrival prediction, and other features. More information can be found here:
http://www.eot.state.ma.us/developers/realtime/
The service is provided by NextBus, which specializes in real-time location information for public transit organizations. The API (sorry, PDF) is very simple and does not require any sort of advance registration.</description><content>&lt;p>The &lt;a href="http://mbta.com/">MBTA&lt;/a> has a trial web service interface that provides access to realtime location information for select MBTA buses, as well as access to route information, arrival prediction, and other features. More information can be found here:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://www.eot.state.ma.us/developers/realtime/">http://www.eot.state.ma.us/developers/realtime/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The service is provided by &lt;a href="http://www.nextbus.com/">NextBus&lt;/a>, which specializes in real-time location information for public transit organizations. The &lt;a href="http://www.eot.state.ma.us/developers/downloads/MBTA_XML_Feed_Trial_Docs_13Nov09.pdf">API&lt;/a> (sorry, PDF) is very simple and does not require any sort of advance registration.&lt;/p>
&lt;p>At the moment, the service only provides coverage for a small number of routes (39, 111, 114, 116, 117). I hope they expand the coverage of this service in the near future!&lt;/p></content></item></channel></rss>