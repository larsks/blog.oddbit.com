<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cloud-init on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/cloud-init/</link><description>Recent content in cloud-init on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Fri, 26 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/cloud-init/rss.xml" rel="self" type="application/rss+xml"/><item><title>OpenStack Networking without DHCP</title><link>https://blog.oddbit.com/post/2015-06-26-openstack-networking-without-d/</link><pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-06-26-openstack-networking-without-d/</guid><description>In an OpenStack environment, cloud-init generally fetches information from the metadata service provided by Nova. It also has support for reading this information from a configuration drive, which under OpenStack means a virtual CD-ROM device attached to your instance containing the same information that would normally be available via the metadata service.
It is possible to generate your network configuration from this configuration drive, rather than relying on the DHCP server provided by your OpenStack environment.</description><content>&lt;p>In an OpenStack environment, &lt;a href="https://cloudinit.readthedocs.org/en/latest/">cloud-init&lt;/a> generally fetches
information from the metadata service provided by Nova. It also has
support for reading this information from a &lt;em>configuration drive&lt;/em>,
which under OpenStack means a virtual CD-ROM device attached to your
instance containing the same information that would normally be
available via the metadata service.&lt;/p>
&lt;p>It is possible to generate your network configuration from this
configuration drive, rather than relying on the DHCP server provided
by your OpenStack environment. In order to do this you will need to
make the following changes to your Nova configuration:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>You must be using a subnet that does have a DHCP server. This
means that you have created it using &lt;code>neutron subnet-create --disable-dhcp ...&lt;/code>, or that you disabled DHCP on an existing
network using &lt;code>neutron net-update --disable-dhcp ...&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You must set &lt;code>flat_inject&lt;/code> to &lt;code>true&lt;/code> in &lt;code>/etc/nova/nova.conf&lt;/code>.
This causes Nova to embed network configuration information in the
meta-data embedded on the configuration drive.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You must ensure that &lt;code>injected_network_template&lt;/code> in
&lt;code>/etc/nova/nova.conf&lt;/code> points to an appropriately formatted
template.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Cloud-init expects the network configuration information to be
presented in the format of a Debian &lt;code>/etc/network/interfaces&lt;/code> file,
even if you&amp;rsquo;re using it on RHEL (or a derivative). The template is
rendered using the &lt;a href="http://jinja.pocoo.org/docs/dev/">Jinja2&lt;/a> template engine, and receives a
top-level key called &lt;code>interfaces&lt;/code> that contains a list of
dictionaries, one for each interface.&lt;/p>
&lt;p>A template similar to the following ought to be sufficient:&lt;/p>
&lt;pre>&lt;code>{% for interface in interfaces %}
auto {{ interface.name }}
iface {{ interface.name }} inet static
address {{ interface.address }}
netmask {{ interface.netmask }}
broadcast {{ interface.broadcast }}
gateway {{ interface.gateway }}
dns-nameservers {{ interface.dns }}
{% endfor %}
&lt;/code>&lt;/pre>
&lt;p>This will directly populate &lt;code>/etc/network/interfaces&lt;/code> on an Ubuntu
system, or will get translated into
&lt;code>/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code> on a RHEL system (a RHEL
environment can only configure a single network interface using this
mechanism).&lt;/p></content></item><item><title>Booting cloud images with libvirt</title><link>https://blog.oddbit.com/post/2015-03-10-booting-cloud-images-with-libv/</link><pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-03-10-booting-cloud-images-with-libv/</guid><description>Most major distributions now provide &amp;ldquo;cloud-enabled&amp;rdquo; images designed for use in cloud environments like OpenStack and AWS. These images are usually differentiated by (a) being relatively small, and (b) running cloud-init at boot to perform initial system configuration tasks using metadata provided by the cloud environment.
Because of their small size and support for automatic configuration (including such useful tasks as provisioning ssh keys), these images are attractive for use outside of a cloud environment.</description><content>&lt;p>Most major distributions now provide &amp;ldquo;cloud-enabled&amp;rdquo; images designed
for use in cloud environments like OpenStack and AWS. These images
are usually differentiated by (a) being relatively small, and (b) running
&lt;a href="http://cloudinit.readthedocs.org/">cloud-init&lt;/a> at boot to perform initial system configuration tasks
using metadata provided by the cloud environment.&lt;/p>
&lt;p>Because of their small size and support for automatic configuration
(including such useful tasks as provisioning ssh keys), these images
are attractive for use &lt;em>outside&lt;/em> of a cloud environment.
Unfortunately, when people first try to boot them they are met with
frustration as first the image takes forever to boot as it tries to
contact a non-existent metadata service, and then when it finally does
boot they are unable to log in because the images typically only
support key-based login.&lt;/p>
&lt;p>Fortunately, there are ways to work around these issues. In addition
to working with various network-accessible metadata services,
&lt;a href="http://cloudinit.readthedocs.org/">cloud-init&lt;/a> is also able to read configuration information from an
attached [virtual] CD-ROM device. This is known as a &amp;ldquo;configuration
drive&amp;rdquo;, and it is relatively easy to create.&lt;/p>
&lt;p>For this purpose, the simplest solution is use &lt;a href="http://cloudinit.readthedocs.org/">cloud-init&lt;/a>&amp;rsquo;s &amp;ldquo;no
cloud&amp;rdquo; data source. For this, we need to create an ISO filesystem
creating two files, &lt;code>meta-data&lt;/code> and (optionally) &lt;code>user-data&lt;/code>.&lt;/p>
&lt;h2 id="the-meta-data-file">The meta-data file&lt;/h2>
&lt;p>The &lt;code>meta-data&lt;/code> file is effectively a YAML version of the data
typically available in the EC2 metadata service, and will look
something like this:&lt;/p>
&lt;pre>&lt;code>instance-id: my-instance-id
local-hostname: my-host-name
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>instance-id&lt;/code> key is required. You can also include SSH public
keys in this file, like this:&lt;/p>
&lt;pre>&lt;code>instance-id: my-instance-id
local-hostname: my-host-name
public-keys:
- ssh-rsa AAAAB3NzaC1...
&lt;/code>&lt;/pre>
&lt;p>You will see examples that place ssh keys in the &lt;code>user-data&lt;/code> file
instead, but I believe this is the wrong solution, since it forces you
to use a &amp;ldquo;cloud-config&amp;rdquo; format &lt;code>user-data&lt;/code> file. Putting ssh keys
into the &lt;code>meta-data&lt;/code> provides you more flexibility with your
&lt;code>user-data&lt;/code> content.&lt;/p>
&lt;h2 id="the-user-data-file">The user-data file&lt;/h2>
&lt;p>The &lt;code>user-data&lt;/code> can be any of the various formats &lt;a href="http://cloudinit.readthedocs.org/en/latest/topics/format.html">supported by
cloud-init&lt;/a>. For example, it could simply be a shell script:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
yum -y install some-critical-package
&lt;/code>&lt;/pre>
&lt;p>Or it could be a &lt;a href="http://cloudinit.readthedocs.org/en/latest/topics/examples.html#yaml-examples">cloud-config&lt;/a> YAML document:&lt;/p>
&lt;pre>&lt;code>#cloud-config
write-files:
- path: /etc/profile.d/gitaliases.sh
content: |
alias gc=&amp;quot;git commit&amp;quot;
alias gcv=&amp;quot;git commit --no-verify&amp;quot;
runcmd:
- setenforce 1
&lt;/code>&lt;/pre>
&lt;h2 id="putting-it-all-together">Putting it all together&lt;/h2>
&lt;p>Once you have created your &lt;code>meta-data&lt;/code> and &lt;code>user-data&lt;/code> files, you can
create the configuration drive like this:&lt;/p>
&lt;pre>&lt;code>genisoimage -o config.iso -V cidata -r -J meta-data user-data
&lt;/code>&lt;/pre>
&lt;p>To boot an instance using this configuration drive, you could do
something like this:&lt;/p>
&lt;pre>&lt;code>virt-install -n example -r 512 -w network=default \
--disk vol=default/fedora-21-cloud.qcow2 --import \
--disk path=config.iso,device=cdrom
&lt;/code>&lt;/pre>
&lt;p>(This assumes, obviously, that you have an image named
&lt;code>fedora-21-cloud.qcow2&lt;/code> available in libvirt&amp;rsquo;s &lt;code>default&lt;/code> storage
pool.)&lt;/p>
&lt;h2 id="a-little-automation">A little automation&lt;/h2>
&lt;p>I have written a &lt;a href="https://github.com/larsks/virt-utils/blob/master/create-config-drive">create-config-drive&lt;/a> script that will automate
this process. With this script available, the above process is
simply:&lt;/p>
&lt;pre>&lt;code>create-config-drive -k ~/.ssh/id_rsa.pub -u user-data config.iso
adding pubkey from /home/lars/.ssh/id_rsa.pub
adding user data from userdata
generating configuration image at config.iso
&lt;/code>&lt;/pre></content></item></channel></rss>