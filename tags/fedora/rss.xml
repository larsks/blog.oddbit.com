<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fedora on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/fedora/</link><description>Recent content in Fedora on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/fedora/rss.xml" rel="self" type="application/rss+xml"/><item><title>Installing pyspatialite on Fedora</title><link>https://blog.oddbit.com/post/2015-11-17-installing-pyspatialite-on-fed/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-11-17-installing-pyspatialite-on-fed/</guid><description>&lt;p&gt;If you should find yourself wanting to install &lt;a href="https://github.com/lokkju/pyspatialite"&gt;pyspatialite&lt;/a&gt; on
Fedora &amp;ndash; perhaps because you want to use the &lt;a href="https://plugins.qgis.org/plugins/processing/"&gt;Processing plugin&lt;/a&gt;
for &lt;a href="http://www.qgis.org/"&gt;QGIS&lt;/a&gt; &amp;ndash; you will first need to install the following
dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlite-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geos-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proj-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python-pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redhat-rpm-config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After which you can install &lt;code&gt;pyspatialite&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt; by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CFLAGS=-I/usr/include pip install pyspatialite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you should be able to use the &amp;ldquo;Processing&amp;rdquo; plugin.&lt;/p&gt;</description></item><item><title>Bootstrapping Ansible on Fedora 23</title><link>https://blog.oddbit.com/post/2015-10-15-bootstrapping-ansible-on-fedor/</link><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-10-15-bootstrapping-ansible-on-fedor/</guid><description>&lt;p&gt;If you&amp;rsquo;ve tried running &lt;a href="http://ansible.com/"&gt;Ansible&lt;/a&gt; against a &lt;a href="http://fedoraproject.org/"&gt;Fedora&lt;/a&gt; 23 system,
you may have run into the following problem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fatal: [myserver]: FAILED! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;failed&amp;quot;: true,
&amp;quot;msg&amp;quot;: &amp;quot;/bin/sh: /usr/bin/python: No such file or directory\r\n&amp;quot;,
&amp;quot;parsed&amp;quot;: false}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fedora has recently made the switch to only including Python 3 on the
base system (at least for the &lt;a href="https://getfedora.org/en/cloud/prerelease/"&gt;cloud&lt;/a&gt; variant), while Ansible still
requires Python 2. With Fedora 23, Python 3 is available as
&lt;code&gt;/usr/bin/python3&lt;/code&gt;, and &lt;code&gt;/usr/bin/python&lt;/code&gt; is only available if you
have installed the Python 2 interpreter.&lt;/p&gt;</description></item><item><title>Booting cloud images with libvirt</title><link>https://blog.oddbit.com/post/2015-03-10-booting-cloud-images-with-libv/</link><pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-03-10-booting-cloud-images-with-libv/</guid><description>&lt;p&gt;Most major distributions now provide &amp;ldquo;cloud-enabled&amp;rdquo; images designed
for use in cloud environments like OpenStack and AWS. These images
are usually differentiated by (a) being relatively small, and (b) running
&lt;a href="http://cloudinit.readthedocs.org/"&gt;cloud-init&lt;/a&gt; at boot to perform initial system configuration tasks
using metadata provided by the cloud environment.&lt;/p&gt;
&lt;p&gt;Because of their small size and support for automatic configuration
(including such useful tasks as provisioning ssh keys), these images
are attractive for use &lt;em&gt;outside&lt;/em&gt; of a cloud environment.
Unfortunately, when people first try to boot them they are met with
frustration as first the image takes forever to boot as it tries to
contact a non-existent metadata service, and then when it finally does
boot they are unable to log in because the images typically only
support key-based login.&lt;/p&gt;</description></item><item><title>Fedora Atomic, OpenStack, and Kubernetes (oh my)</title><link>https://blog.oddbit.com/post/2014-11-24-fedora-atomic-openstack-and-ku/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-11-24-fedora-atomic-openstack-and-ku/</guid><description>&lt;p&gt;While experimenting with &lt;a href="http://www.projectatomic.io/"&gt;Fedora Atomic&lt;/a&gt;, I was looking for an
elegant way to automatically deploy Atomic into an &lt;a href="http://openstack.org/"&gt;OpenStack&lt;/a&gt;
environment and then automatically schedule some &lt;a href="http://docker.com/"&gt;Docker&lt;/a&gt; containers
on the Atomic host. This post describes my solution.&lt;/p&gt;
&lt;p&gt;Like many other cloud-targeted distributions, Fedora Atomic runs
&lt;a href="http://cloudinit.readthedocs.org/"&gt;cloud-init&lt;/a&gt; when the system boots. We can take advantage of this
to configure the system at first boot by providing a &lt;code&gt;user-data&lt;/code&gt; blob
to Nova when we boot the instance. A &lt;code&gt;user-data&lt;/code&gt; blob can be as
simple as a shell script, and while we could arguably mash everything
into a single script it wouldn&amp;rsquo;t be particularly maintainable or
flexible in the face of different pod/service/etc descriptions.&lt;/p&gt;</description></item><item><title>Fedora and OVS Bridge Interfaces</title><link>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</guid><description>&lt;p&gt;I run OpenStack on my laptop, and I&amp;rsquo;ve been chasing down a pernicious
problem with OVS bridge interfaces under both F19 and F20. My
OpenStack environment relies on an OVS bridge device named &lt;code&gt;br-ex&lt;/code&gt; for
external connectivity and for making services available to OpenStack
instances, but after rebooting, &lt;code&gt;br-ex&lt;/code&gt; was consistently unconfigured,
which caused a variety of problems.&lt;/p&gt;
&lt;p&gt;This is the network configuration file for &lt;code&gt;br-ex&lt;/code&gt; on my system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEVICE=br-ex
DEVICETYPE=ovs
TYPE=OVSBridge
BOOTPROT=static
IPADDR=192.168.200.1
NETMASK=255.255.255.0
ONBOOT=yes
NM_CONTROLLED=no
ZONE=openstack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;ifup br-ex&lt;/code&gt; would also fail to configure the interface, but
running &lt;code&gt;ifdown br-ex; ifup br-ex&lt;/code&gt; would configure things
appropriately.&lt;/p&gt;</description></item><item><title>Private /tmp directories in Fedora</title><link>https://blog.oddbit.com/post/2012-11-05-fedora-private-tmp/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2012-11-05-fedora-private-tmp/</guid><description>&lt;p&gt;I ran into an odd problem the other day: I was testing out some
configuration changes for a web application by dropping files into
&lt;code&gt;/tmp&lt;/code&gt; and pointing the application configuration at the appropriate
directory. Everything worked out great when testing it by hand&amp;hellip;but
when starting up the &lt;code&gt;httpd&lt;/code&gt; service, the application behaved as if it
was unable to find any of the files in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My first assumption was that had simply missed something obvious like
file permissions or that I had a typo in my configuration, but after
repeated checks and lots of testing it was obvious that something else
was going on.&lt;/p&gt;</description></item></channel></rss>