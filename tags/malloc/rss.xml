<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malloc on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/malloc/</link><description>Recent content in Malloc on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/malloc/rss.xml" rel="self" type="application/rss+xml"/><item><title>AVR micro-optimization: Losing malloc</title><link>https://blog.oddbit.com/post/2019-01-28-losing-malloc/</link><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-01-28-losing-malloc/</guid><description>&lt;p&gt;Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?&lt;/p&gt;
&lt;p&gt;When I write OO-style code in C, I usually start with something like the following, in which I use &lt;code&gt;malloc()&lt;/code&gt; to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Button *button_new(uint8_t pin, uint8_t poll_freq) {
 Button *button = (Button *)malloc(sizeof(Button));
 // do some initialization stuff

 return button;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when initially writing &lt;a href="https://blog.oddbit.com/post/2019-01-19-pipower-a-raspberry-pi-ups/"&gt;pipower&lt;/a&gt;, that&amp;rsquo;s exactly what I did. But while thinking about it after the fact, I realized the following:&lt;/p&gt;</description></item></channel></rss>