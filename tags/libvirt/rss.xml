<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>libvirt on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/libvirt/</link><description>Recent content in libvirt on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Fri, 04 Oct 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/libvirt/rss.xml" rel="self" type="application/rss+xml"/><item><title>Automatic hostname entries for libvirt domains</title><link>https://blog.oddbit.com/post/2013-10-04-automatic-dns-entrie/</link><pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-10-04-automatic-dns-entrie/</guid><description>Have you ever wished that you could use libvirt domain names as hostnames? So that you could do something like this:
$ virt-install -n anewhost ... $ ssh clouduser@anewhost Since this is something that would certainly make my life convenient, I put together a small script called virt-hosts that makes this possible. You can find virt-hosts in my virt-utils GitHub repository:
https://raw.github.com/larsks/virt-utils/master/virt-hosts Run by itself, with no options, virt-hosts will scan through your running domains for interfaces on the libvirt default network, look up those MAC addresses up in the corresponding default.</description><content>&lt;p>Have you ever wished that you could use &lt;code>libvirt&lt;/code> domain names as
hostnames? So that you could do something like this:&lt;/p>
&lt;pre>&lt;code>$ virt-install -n anewhost ...
$ ssh clouduser@anewhost
&lt;/code>&lt;/pre>
&lt;p>Since this is something that would certainly make my life convenient,
I put together a small script called &lt;a href="https://raw.github.com/larsks/virt-utils/master/virt-hosts">virt-hosts&lt;/a> that makes this
possible. You can find &lt;a href="https://raw.github.com/larsks/virt-utils/master/virt-hosts">virt-hosts&lt;/a> in my &lt;a href="https://raw.github.com/larsks/virt-utils/">virt-utils&lt;/a> GitHub
repository:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://raw.github.com/larsks/virt-utils/master/virt-hosts">https://raw.github.com/larsks/virt-utils/master/virt-hosts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Run by itself, with no options, &lt;code>virt-hosts&lt;/code> will scan through your
running domains for interfaces on the libvirt &lt;code>default&lt;/code> network, look
up those MAC addresses up in the corresponding &lt;code>default.leases&lt;/code> file,
and then generate a hosts file on &lt;code>stdout&lt;/code> like this:&lt;/p>
&lt;pre>&lt;code>$ virt-hosts
192.168.122.221 compute-tmp0-net0.default.virt compute-tmp0.default.virt
192.168.122.101 centos-0-net0.default.virt centos-0.default.virt
192.168.122.214 controller-tmp-net0.default.virt controller-tmp.default.virt
&lt;/code>&lt;/pre>
&lt;p>Each address will be assigned the name
&lt;code>&amp;lt;domain_name&amp;gt;-&amp;lt;interface_name&amp;gt;.&amp;lt;network_name&amp;gt;.virt&lt;/code>. The first
interface on the network will also be given the alias
&lt;code>&amp;lt;domain_name&amp;gt;.&amp;lt;network_name&amp;gt;.virt&lt;/code>, so a host with multiple
interfaces on the same network would look like this:&lt;/p>
&lt;pre>&lt;code>$ virt-hosts
192.168.122.221 host0-net0.default.virt host0.default.virt
192.168.122.110 host0-net1.default.virt
&lt;/code>&lt;/pre>
&lt;p>Of course, this is only half the solution: having generated a hosts
file we need to put it somewhere where your system can find it.&lt;/p>
&lt;h2 id="an-aside-incron">An aside: incron&lt;/h2>
&lt;p>Both of the following solutions rely on &lt;a href="http://inotify.aiken.cz/?section=incron&amp;amp;page=about&amp;amp;lang=en">incron&lt;/a>, a tool that uses
the Linux &lt;a href="http://en.wikipedia.org/wiki/Inotify">inotify&lt;/a> subsystem to trigger scripts in reaction to
events on file and directories. In this case, we&amp;rsquo;ll be using &lt;code>incron&lt;/code>
to monitor the dnsmasq &lt;code>default.leases&lt;/code> file and firing off a script
when it changes.&lt;/p>
&lt;p>You could accomplish the same thing using the &lt;code>inotifywait&lt;/code> program
from the &lt;a href="https://github.com/rvoicilas/inotify-tools/wiki">inotify-tools&lt;/a> package and a small wrapper script, or you
could hook up something to the libvirt events framework.&lt;/p>
&lt;h2 id="using-etchosts">Using /etc/hosts&lt;/h2>
&lt;p>If you want to update your &lt;code>/etc/hosts&lt;/code> file, you can place the
following into a script called &lt;code>update-virt-hosts&lt;/code> (somewhere in
root&amp;rsquo;s &lt;code>PATH&lt;/code>) and run that via &lt;a href="http://inotify.aiken.cz/?section=incron&amp;amp;page=about&amp;amp;lang=en">incron&lt;/a>:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
sed -i '/^# BEGIN VIRT HOSTS/,/^# END VIRT HOSTS/ d' /etc/hosts
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/hosts
# BEGIN VIRT HOSTS
$(virt-hosts)
# END VIRT HOSTS
EOF
&lt;/code>&lt;/pre>
&lt;p>Make sure you have &lt;code>incron&lt;/code> installed, and add the following to
&lt;code>/etc/incron.d/virt-hosts&lt;/code>:&lt;/p>
&lt;pre>&lt;code>/var/lib/libvirt/dnsmasq/default.leases IN_MODIFY update-virt-hosts
&lt;/code>&lt;/pre>
&lt;p>This will cause &lt;code>incron&lt;/code> to run your &lt;code>update-virt-hosts&lt;/code> script
whenever it sees an &lt;code>IN_MODIFY&lt;/code> event on the &lt;code>default.leases&lt;/code> file.&lt;/p>
&lt;h2 id="using-networkmanager--dnsmasq">Using NetworkManager + dnsmasq&lt;/h2>
&lt;p>I am running NetworkManager with the &lt;code>dnsmasq&lt;/code> dns plugin. I created
the file &lt;code>/etc/NetworkManager/dnsmasq.d/virthosts&lt;/code> containing:&lt;/p>
&lt;pre>&lt;code>addn-hosts=/var/lib/libvirt/dnsmasq/default.addnhosts
&lt;/code>&lt;/pre>
&lt;p>This will cause the &lt;code>dnsmasq&lt;/code> process started by &lt;code>NetworkManager&lt;/code> to
use that file as an additional hosts file. I then installed the
&lt;code>incron&lt;/code> package and dropped the following in
&lt;code>/etc/incron.d/virt-hosts&lt;/code>:&lt;/p>
&lt;pre>&lt;code>/var/lib/libvirt/dnsmasq/default.leases IN_MODIFY /usr/local/bin/virt-hosts -ur
&lt;/code>&lt;/pre>
&lt;p>This has &lt;code>incron&lt;/code> listen for changes to the &lt;code>default.leases&lt;/code> file, and
whenever it receives the &lt;code>IN_MODIFY&lt;/code> event it runs &lt;code>virt-hosts&lt;/code> with
the &lt;code>-u&lt;/code> (aka &lt;code>--update&lt;/code>) and &lt;code>-r&lt;/code> (aka &lt;code>--reload-dnsmasq&lt;/code>) flags.
Thef former causes &lt;code>virt-hosts&lt;/code> to send output to
&lt;code>/var/lib/libvirt/dnsmasq/default.addnhosts&lt;/code> instead of &lt;code>stdout&lt;/code>, and
the latter does a &lt;code>killall -HUP dnsmasq&lt;/code> after installing the new
hosts file.&lt;/p></content></item></channel></rss>