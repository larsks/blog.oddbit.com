<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/json/</link><description>Recent content in json on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Sun, 17 Nov 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/json/rss.xml" rel="self" type="application/rss+xml"/><item><title>json-tools: cli for generating and filtering json</title><link>https://blog.oddbit.com/posts/json-tools/</link><pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/posts/json-tools/</guid><description>Interacting with JSON-based APIs from the command line can be difficult, and OpenStack is filled with REST APIs that consume or produce JSON. I&amp;rsquo;ve just put pair of tools for generating and filtering JSON on the command line, called collectively json-tools.
Both make use of the Python dpath module to populate or filter JSON objects.
The jsong command generates JSON on stdout. You provide /-delimited paths on the command line to represent the JSON structure.</description><content>&lt;p>Interacting with JSON-based APIs from the command line can be
difficult, and OpenStack is filled with REST APIs that consume or
produce JSON. I&amp;rsquo;ve just put pair of tools for generating and
filtering JSON on the command line, called collectively
&lt;a href="http://github.com/larsks/json-tools/">json-tools&lt;/a>.&lt;/p>
&lt;p>Both make use of the Python &lt;a href="https://github.com/akesterson/dpath-python">dpath&lt;/a> module to populate or filter
JSON objects.&lt;/p>
&lt;p>The &lt;code>jsong&lt;/code> command generates JSON on &lt;code>stdout&lt;/code>. You provide &lt;code>/&lt;/code>-delimited paths
on the command line to represent the JSON structure. For example, if
you run:&lt;/p>
&lt;pre>&lt;code>$ jsong auth/passwordCredentials/username=admin \
auth/passwordCredentials/password=secret
&lt;/code>&lt;/pre>
&lt;p>You get:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;auth&amp;quot;: {
&amp;quot;passwordCredentials&amp;quot;: {
&amp;quot;username&amp;quot;: &amp;quot;admin&amp;quot;,
&amp;quot;password&amp;quot;: &amp;quot;secret&amp;quot;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>jsonx&lt;/code> command accepts JSON on &lt;code>stdin&lt;/code> and selects subtrees or
values for output on &lt;code>stdout&lt;/code>. Given the above output, you could
extract the password with:&lt;/p>
&lt;pre>&lt;code>jsonx -v auth/passwordCredentials/password
&lt;/code>&lt;/pre>
&lt;p>Which would give you:&lt;/p>
&lt;pre>&lt;code>secret
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>-v&lt;/code> flag here indicates that you only want the values of matched
paths; without the &lt;code>-v&lt;/code> the output would have been:&lt;/p>
&lt;pre>&lt;code>auth/passwordCredentials/password secret
&lt;/code>&lt;/pre>
&lt;p>There are more examples &amp;ndash; including some use of the OpenStack APIs &amp;ndash;
in the &lt;a href="https://github.com/larsks/json-tools/blob/master/README.md">README&lt;/a> document.&lt;/p></content></item></channel></rss>