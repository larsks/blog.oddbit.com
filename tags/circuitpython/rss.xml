<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>circuitpython on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/circuitpython/</link><description>Recent content in circuitpython on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 03 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/circuitpython/rss.xml" rel="self" type="application/rss+xml"/><item><title>Using a TM1637 LED module with CircuitPython</title><link>https://blog.oddbit.com/post/2018-05-03-using-a-tm-led-module-with-cir/</link><pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2018-05-03-using-a-tm-led-module-with-cir/</guid><description>CircuitPython is &amp;ldquo;an education friendly open source derivative of MicroPython&amp;rdquo;. MicroPython is a port of Python to microcontroller environments; it can run on boards with very few resources such as the ESP8266. I&amp;rsquo;ve recently started experimenting with CircuitPython on a Wemos D1 mini, which is a small form-factor ESP8266 board.
I had previously been using Mike Causer&amp;rsquo;s micropython-tm1637 for MicroPython to drive a 4 digit LED display. I was hoping to get the same code working under CircuitPython, but when I tried to build an image that included the tm1637 module I ran into:</description><content>&lt;p>&lt;a href="https://learn.adafruit.com/welcome-to-circuitpython/overview">CircuitPython&lt;/a> is &amp;ldquo;an education friendly open source derivative of
&lt;a href="https://micropython.org/">MicroPython&lt;/a>&amp;rdquo;. MicroPython is a port of Python to microcontroller
environments; it can run on boards with very few resources such as the
&lt;a href="https://en.wikipedia.org/wiki/ESP8266">ESP8266&lt;/a>. I&amp;rsquo;ve recently started experimenting with CircuitPython
on a &lt;a href="https://wiki.wemos.cc/products:d1:d1_mini">Wemos D1 mini&lt;/a>, which is a small form-factor ESP8266 board.&lt;/p>
&lt;p>I had previously been using Mike Causer&amp;rsquo;s &lt;a href="https://github.com/mcauser/micropython-tm1637/">micropython-tm1637&lt;/a> for
MicroPython to drive a &lt;a href="http://a.co/gQVPtPr">4 digit LED display&lt;/a>. I was hoping to
get the same code working under CircuitPython, but when I tried to
build an image that included the &lt;code>tm1637&lt;/code> module I ran into:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> tm1637
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;tm1637.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ImportError&lt;/span>: cannot &lt;span style="color:#f92672">import&lt;/span> name sleep_us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One of CircuitPython&amp;rsquo;s goals is to be as close to CPython as possible.
This means that in many cases the CircuitPython folks have
re-implemented MicroPython modules to have syntax that is more a
strict subset of the CPython equivalent, and the MicroPython &lt;code>time&lt;/code>
module is impacted by this change. With stock MicroPython, the &lt;code>time&lt;/code>
module has:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(dir(time)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__class__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__name__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>localtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mktime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep_ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep_us
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ticks_add
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ticks_cpu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ticks_diff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ticks_ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ticks_us
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the corresponding CircuitPython module has:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(dir(time)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__name__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>monotonic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>struct_time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>localtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mktime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out that the necessary functions are defined in the &lt;code>utime&lt;/code>
module, which is implemented by &lt;code>ports/esp8266/modutime.c&lt;/code>, but this
module is not included in the CircuitPython build.Â How do we fix that?&lt;/p>
&lt;p>The most obvious change is to add &lt;code>modutime.c&lt;/code> to the &lt;code>SRC_C&lt;/code> variable
in &lt;code>ports/esp8266/Makefile&lt;/code>, which gets us:&lt;/p>
&lt;pre tabindex="0">&lt;code>SRC_C = \
[...]
modesp.c \
modnetwork.c \
modutime.c \
[...]
&lt;/code>&lt;/pre>&lt;p>After making this change and trying to build CircuitPython, I
hit 70 or so lines like:&lt;/p>
&lt;pre tabindex="0">&lt;code>Generating build/genhdr/mpversion.h
In file included from ../../py/mpstate.h:35:0,
from ../../py/runtime.h:29,
from modutime.c:32:
modutime.c:109:50: error: &amp;#39;MP_QSTR_utime&amp;#39; undeclared here (not in a function)
{ MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_utime) },
^
&lt;/code>&lt;/pre>&lt;p>The &lt;code>MP_QSTR_&lt;/code> macros are sort of magical: they are generated during
the build process by scanning for references of the form
&lt;code>MP_QSTR_utime&lt;/code> and creating definitions that look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">QDEF&lt;/span>(MP_QSTR_utime, (&lt;span style="color:#66d9ef">const&lt;/span> byte&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xe5\x9d\x05&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;utime&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But&amp;hellip;and this is the immediate problem&amp;hellip;this generation only happens
with a clean build. Running &lt;code>make clean&lt;/code> and then re-running the
build yields:&lt;/p>
&lt;pre tabindex="0">&lt;code>build/shared-bindings/time/__init__.o:(.rodata.time_localtime_obj+0x0): multiple definition of `time_localtime_obj&amp;#39;
build/modutime.o:(.rodata.time_localtime_obj+0x0): first defined here
build/shared-bindings/time/__init__.o:(.rodata.time_mktime_obj+0x0): multiple definition of `time_mktime_obj&amp;#39;
build/modutime.o:(.rodata.time_mktime_obj+0x0): first defined here
build/shared-bindings/time/__init__.o:(.rodata.time_time_obj+0x0): multiple definition of `time_time_obj&amp;#39;
build/modutime.o:(.rodata.time_time_obj+0x0): first defined here
&lt;/code>&lt;/pre>&lt;p>The above errors show a conflict between the structures defined in
&lt;code>utime&lt;/code>, which have just activated, and the existing &lt;code>time&lt;/code>
module. A simple rename will take care of that problem; instead of:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN&lt;/span>(time_localtime_obj, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, time_localtime);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We want:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN&lt;/span>(utime_localtime_obj, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, time_localtime);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And so forth. At this point, everything builds correctly, but if we
deploy the image to our board and try to import the &lt;code>utime&lt;/code> module, we
see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> utime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ImportError&lt;/span>: no module named &lt;span style="color:#e6db74">&amp;#39;utime&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The final piece of this puzzle is that there is a list of built-in
modules defined in &lt;code>mpconfigport.h&lt;/code>. We need to add our &lt;code>utime&lt;/code>
module to that list:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define MICROPY_PORT_BUILTIN_MODULES \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> [...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> { &lt;span style="color:#a6e22e">MP_ROM_QSTR&lt;/span>(MP_QSTR_utime), &lt;span style="color:#a6e22e">MP_ROM_PTR&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>utime_module) }, \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [...]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we build and deploy our image, we&amp;rsquo;re now able to use the methods
from the &lt;code>utime&lt;/code> module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>Adafruit CircuitPython &lt;span style="color:#ae81ff">3.0.0&lt;/span>&lt;span style="color:#f92672">-&lt;/span>alpha&lt;span style="color:#ae81ff">.6&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">42&lt;/span>&lt;span style="color:#f92672">-&lt;/span>gb46567004 on &lt;span style="color:#ae81ff">2018&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">05&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">06&lt;/span>; ESP module &lt;span style="color:#66d9ef">with&lt;/span> ESP8266
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> utime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> utime&lt;span style="color:#f92672">.&lt;/span>sleep_ms(&lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to make one final change to the &lt;code>tm1637&lt;/code> module, since as
written it imports methods from the &lt;code>time&lt;/code> module. Instead of:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> time &lt;span style="color:#f92672">import&lt;/span> sleep_us, sleep_ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have to modify it to read:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> time &lt;span style="color:#f92672">import&lt;/span> sleep_us, sleep_ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ImportError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> utime &lt;span style="color:#f92672">import&lt;/span> sleep_us, sleep_ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With our working &lt;code>utime&lt;/code> module and the modified &lt;code>tm1637&lt;/code> module, we
are now able to drive our display:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/laH7HY-wlCk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></content></item></channel></rss>