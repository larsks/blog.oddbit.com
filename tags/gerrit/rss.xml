<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gerrit on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/gerrit/</link><description>Recent content in Gerrit on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/gerrit/rss.xml" rel="self" type="application/rss+xml"/><item><title>Making sure your Gerrit changes aren't broken</title><link>https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/</guid><description>&lt;p&gt;It&amp;rsquo;s a bit of an embarrassment when you submit a review to Gerrit only
to have it fail CI checks immediately because of something as simple
as a syntax error or pep8 failure that you should have caught yourself
before submitting&amp;hellip;but you forgot to run your validations before
submitting the change.&lt;/p&gt;
&lt;p&gt;In many cases you can alleviate this through the use of the git
&lt;code&gt;pre-commit&lt;/code&gt; hook, which will run every time you commit changes
locally. You can have the hook run &lt;code&gt;tox&lt;/code&gt; or whatever tool your
project uses for validation on every commit. This works okay for
simple cases, but if the validation takes more than a couple of
seconds the delay can be disruptive to the flow of your work.&lt;/p&gt;</description></item><item><title>Gruf gets superpowers</title><link>https://blog.oddbit.com/post/2016-02-19-gruf-gets-superpowers/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-02-19-gruf-gets-superpowers/</guid><description>&lt;p&gt;In my &lt;a href="https://blog.oddbit.com/post/2016-02-16-gruf-a-gerrit-command-line-uti/"&gt;last article&lt;/a&gt; article I introduced &lt;a href="http://github.com/larsks/gruf"&gt;Gruf&lt;/a&gt;, a command line
tool for interacting with &lt;a href="https://www.gerritcodereview.com/"&gt;Gerrit&lt;/a&gt;. Since then, Gruf has gained a
few important new features.&lt;/p&gt;
&lt;h2 id="caching"&gt;Caching&lt;/h2&gt;
&lt;p&gt;Gruf will now by default cache results for five minutes. This avoids
repeatedly querying the server for the same information when you&amp;rsquo;re
just displaying it with different templates (for example, if you run a
&lt;code&gt;gruf query open here&lt;/code&gt; followed by a &lt;code&gt;gruf -t patches query open here&lt;/code&gt;).&lt;/p&gt;</description></item><item><title>Gruf, a Gerrit command line utility</title><link>https://blog.oddbit.com/post/2016-02-16-gruf-a-gerrit-command-line-uti/</link><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-02-16-gruf-a-gerrit-command-line-uti/</guid><description>&lt;p&gt;(See also &lt;a href="https://blog.oddbit.com/post/2016-02-19-gruf-gets-superpowers/"&gt;the followup&lt;/a&gt; to this article.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently started spending more time interacting with &lt;a href="https://www.gerritcodereview.com/"&gt;Gerrit&lt;/a&gt;,
the code review tool used both by &lt;a href="http://openstack.org/"&gt;OpenStack&lt;/a&gt;, at
&lt;a href="http://review.openstack.org/"&gt;review.openstack.org&lt;/a&gt;, and by a variety of other open source projects
at GerritForge&amp;rsquo;s GitHub-linked &lt;a href="http://review.gerrithub.io/"&gt;review.gerrithub.io&lt;/a&gt;. I went
looking for command line tools and was largely disappointed with what
I found. Many of the solutions out there assume that you&amp;rsquo;re regularly
interacting with a single Gerrit instance, and that&amp;rsquo;s seldom the case:
more often, the Gerrit server in use varies from project to project.&lt;br&gt;
I also found that many of the tools were opinionated in what sort of
output they would produce.&lt;/p&gt;</description></item></channel></rss>