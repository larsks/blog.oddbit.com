<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Openstack on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/openstack/</link><description>Recent content in Openstack on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/openstack/rss.xml" rel="self" type="application/rss+xml"/><item><title>OVN and DHCP: A minimal example</title><link>https://blog.oddbit.com/post/2019-12-19-ovn-and-dhcp/</link><pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-12-19-ovn-and-dhcp/</guid><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A long time ago, I wrote an article &lt;a href="https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/"&gt;all about OpenStack Neutron&lt;/a&gt; (which at that time was called Quantum). That served as an excellent reference for a number of years, but if you&amp;rsquo;ve deployed a recent version of OpenStack you may have noticed that the network architecture looks completely different. The network namespaces previously used to implement routers and dhcp servers are gone (along with iptables rules and other features), and have been replaced by OVN (&amp;ldquo;Open Virtual Network&amp;rdquo;). What is OVN? How does it work? In this article, I&amp;rsquo;d like to explore a minimal OVN installation to help answer these questions.&lt;/p&gt;</description></item><item><title>Running Keystone with Docker Compose</title><link>https://blog.oddbit.com/post/2019-06-07-running-keystone-with-docker-c/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-06-07-running-keystone-with-docker-c/</guid><description>&lt;p&gt;In this article, we will look at what is necessary to run OpenStack&amp;rsquo;s &lt;a href="https://docs.openstack.org/keystone/latest/"&gt;Keystone&lt;/a&gt; service (and the requisite database server) in containers using &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="running-mariadb"&gt;Running MariaDB&lt;/h2&gt;
&lt;p&gt;The standard &lt;a href="https://hub.docker.com/_/mariadb/"&gt;mariadb docker image&lt;/a&gt; can be configured via a number of environment variables. It also benefits from persistent volume storage, since in most situations you don&amp;rsquo;t want to lose your data when you remove a container. A simple &lt;code&gt;docker&lt;/code&gt; command line for starting MariaDB might look something like:&lt;/p&gt;</description></item><item><title>Grouping aggregation queries in Gnocchi 4.0.x</title><link>https://blog.oddbit.com/post/2018-02-26-grouping-aggregation-queries-i/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2018-02-26-grouping-aggregation-queries-i/</guid><description>&lt;p&gt;In this article, we&amp;rsquo;re going to ask Gnocchi (the OpenStack telemetry
storage service) how much memory was used, on average, over the course
of each day by each project in an OpenStack environment.&lt;/p&gt;
&lt;h2 id="environment"&gt;Environment&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m working with an OpenStack &amp;ldquo;Pike&amp;rdquo; deployment, which means I have
Gnocchi 4.0.x. More recent versions of Gnocchi (4.1.x and later) have
a new aggregation API called &lt;a href="https://gnocchi.xyz/rest.html#dynamic-aggregates"&gt;dynamic aggregates&lt;/a&gt;, but that isn&amp;rsquo;t
available in 4.0.x so in this article we&amp;rsquo;ll be using the legacy
&lt;code&gt;/v1/aggregations&lt;/code&gt; API.&lt;/p&gt;</description></item><item><title>Safely restarting an OpenStack server with Ansible</title><link>https://blog.oddbit.com/post/2018-01-24-safely-restarting-an-openstack/</link><pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2018-01-24-safely-restarting-an-openstack/</guid><description>&lt;p&gt;The other day on &lt;a href="http://docs.ansible.com/ansible/latest/community.html#irc-channel"&gt;#ansible&lt;/a&gt;, someone was looking for a way to safely
shut down a Nova server, wait for it to stop, and then start it up
again using the &lt;code&gt;openstack&lt;/code&gt; cli. The first part seemed easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: myserver
 tasks:
 - name: shut down the server
 command: poweroff
 become: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;but that will actually fail with the following result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TASK [shut down server] *************************************
fatal: [myserver]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;:
&amp;quot;Failed to connect to the host via ssh: Shared connection to
10.0.0.103 closed.\r\n&amp;quot;, &amp;quot;unreachable&amp;quot;: true}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This happens because running &lt;code&gt;poweroff&lt;/code&gt; immediately closes Ansible&amp;rsquo;s
ssh connection. The workaround here is to use a &amp;ldquo;fire-and-forget&amp;rdquo;
&lt;a href="http://docs.ansible.com/ansible/latest/playbooks_async.html"&gt;asynchronous task&lt;/a&gt;:&lt;/p&gt;</description></item><item><title>Ansible for Infrastructure Testing</title><link>https://blog.oddbit.com/post/2017-08-02-ansible-for-infrastructure-tes/</link><pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-08-02-ansible-for-infrastructure-tes/</guid><description>&lt;p&gt;At &lt;code&gt;$JOB&lt;/code&gt; we often find ourselves at customer sites where we see the
same set of basic problems that we have previously encountered
elsewhere (&amp;ldquo;your clocks aren&amp;rsquo;t in sync&amp;rdquo; or &amp;ldquo;your filesystem is full&amp;rdquo;
or &amp;ldquo;you haven&amp;rsquo;t installed a critical update&amp;rdquo;, etc). We would like a
simple tool that could be run either by the customer or by our own
engineers to test for and report on these common issues.
Fundamentally, we want something that acts like a typical code test
suite, but for infrastructure.&lt;/p&gt;</description></item><item><title>OpenStack, Containers, and Logging</title><link>https://blog.oddbit.com/post/2017-06-14-openstack-containers-and-loggi/</link><pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-06-14-openstack-containers-and-loggi/</guid><description>&lt;p&gt;I&amp;rsquo;ve been thinking about logging in the context of OpenStack and containerized service deployments. I&amp;rsquo;d like to lay out some of my thoughts on this topic and see if people think I am talking crazy or not.&lt;/p&gt;
&lt;p&gt;There are effectively three different mechanisms that an application can use to emit log messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Via some logging-specific API, such as the legacy syslog API&lt;/li&gt;
&lt;li&gt;By writing a byte stream to stdout/stderr&lt;/li&gt;
&lt;li&gt;By writing a byte stream to a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A substantial advantage to the first mechanism (using a logging API) is that the application is logging &lt;em&gt;messages&lt;/em&gt; rather than &lt;em&gt;bytes&lt;/em&gt;. This means that if you log a message containing embedded newlines (e.g., python or java tracebacks), you can collect that as a single message rather than having to impose some sort of structure on the byte stream after the fact in order to reconstruct those message.&lt;/p&gt;</description></item><item><title>Making sure your Gerrit changes aren't broken</title><link>https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/</guid><description>&lt;p&gt;It&amp;rsquo;s a bit of an embarrassment when you submit a review to Gerrit only
to have it fail CI checks immediately because of something as simple
as a syntax error or pep8 failure that you should have caught yourself
before submitting&amp;hellip;but you forgot to run your validations before
submitting the change.&lt;/p&gt;
&lt;p&gt;In many cases you can alleviate this through the use of the git
&lt;code&gt;pre-commit&lt;/code&gt; hook, which will run every time you commit changes
locally. You can have the hook run &lt;code&gt;tox&lt;/code&gt; or whatever tool your
project uses for validation on every commit. This works okay for
simple cases, but if the validation takes more than a couple of
seconds the delay can be disruptive to the flow of your work.&lt;/p&gt;</description></item><item><title>Exploring YAQL Expressions</title><link>https://blog.oddbit.com/post/2016-08-11-exploring-yaql-expressions/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-08-11-exploring-yaql-expressions/</guid><description>&lt;p&gt;The Newton release of &lt;a href="https://wiki.openstack.org/wiki/Heat"&gt;Heat&lt;/a&gt; adds support for a &lt;a href="http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#yaql"&gt;yaql&lt;/a&gt;
intrinsic function, which allows you to evaluate &lt;a href="https://yaql.readthedocs.io/en/latest/"&gt;yaql&lt;/a&gt; expressions
in your Heat templates. Unfortunately, the existing yaql
documentation is somewhat limited, and does not offer examples of many
of yaql&amp;rsquo;s more advanced features.&lt;/p&gt;
&lt;p&gt;I am working on a &lt;a href="http://www.fluentd.org/"&gt;Fluentd&lt;/a&gt; composable service for &lt;a href="https://wiki.openstack.org/wiki/TripleO"&gt;TripleO&lt;/a&gt;. I
want to allow each service to specify a logging source configuration
fragment, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parameters:
 NovaAPILoggingSource:
 type: json
 description: Fluentd logging configuration for nova-api.
 default:
 tag: openstack.nova.api
 type: tail
 format: |
 /(?&amp;lt;time&amp;gt;\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d+) (?&amp;lt;pid&amp;gt;\d+) (?&amp;lt;priority&amp;gt;\S+) (?&amp;lt;message&amp;gt;.*)/
 path: /var/log/nova/nova-api.log
 pos_file: /var/run/fluentd/openstack.nova.api.pos
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This generally works, but several parts of this fragment are going to
be the same across all OpenStack services. I wanted to reduce the
above to just the unique attributes, which would look something like:&lt;/p&gt;</description></item><item><title>Connecting another vm to your tripleo-quickstart deployment</title><link>https://blog.oddbit.com/post/2016-05-19-connecting-another-vm-to-your-/</link><pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-05-19-connecting-another-vm-to-your-/</guid><description>&lt;p&gt;Let&amp;rsquo;s say that you have set up an environment using
&lt;a href="https://github.com/openstack/tripleo-quickstart/"&gt;tripleo-quickstart&lt;/a&gt; and you would like to add another virtual
machine to the mix that has both &amp;ldquo;external&amp;rdquo; connectivity (&amp;ldquo;external&amp;rdquo;
in quotes because I am using it in the same way as the quickstart does
w/r/t the undercloud) and connectivity to the overcloud nodes. How
would you go about setting that up?&lt;/p&gt;
&lt;p&gt;For a concrete example, let&amp;rsquo;s presume you have deployed an environment
using the default tripleo-quickstart configuration, which looks like
this:&lt;/p&gt;</description></item><item><title>Deploying an HA OpenStack development environment with tripleo-quickstart</title><link>https://blog.oddbit.com/post/2016-02-19-deploy-an-ha-openstack-develop/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-02-19-deploy-an-ha-openstack-develop/</guid><description>&lt;p&gt;In this article I would like to introduce &lt;a href="https://github.com/redhat-openstack/tripleo-quickstart"&gt;tripleo-quickstart&lt;/a&gt;, a
tool that will automatically provision a virtual environment and then
use &lt;a href="http://docs.openstack.org/developer/tripleo-docs/"&gt;TripleO&lt;/a&gt; to deploy an HA OpenStack on top of it.&lt;/p&gt;
&lt;h2 id="introducing-tripleo-quickstart"&gt;Introducing Tripleo-Quickstart&lt;/h2&gt;
&lt;p&gt;The goal of the &lt;a href="https://github.com/redhat-openstack/tripleo-quickstart"&gt;Tripleo-Quickstart&lt;/a&gt; project is to replace the
&lt;code&gt;instack-virt-setup&lt;/code&gt; tool for quickly setting up virtual TripleO
environments, and to ultimately become the tool used by both
developers and upstream CI for this purpose. The project is a set of
&lt;a href="http://ansible.com/"&gt;Ansible&lt;/a&gt; playbooks that will take care of:&lt;/p&gt;</description></item><item><title>Ansible 2.0: New OpenStack modules</title><link>https://blog.oddbit.com/post/2015-10-26-ansible-20-new-openstack-modul/</link><pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-10-26-ansible-20-new-openstack-modul/</guid><description>&lt;p&gt;This is the second in a loose sequence of articles looking at new
features in Ansible 2.0. In the previous article I looked at the
&lt;a href="https://blog.oddbit.com/post/2015-10-13-ansible-20-the-docker-connecti/"&gt;Docker connection driver&lt;/a&gt;. In this article, I would like to
provide an overview of the new-and-much-improved suite of modules for
interacting with an &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt; environment, and provide a few
examples of their use.&lt;/p&gt;
&lt;p&gt;In versions of Ansible prior to 2.0, there was a small collection of
OpenStack modules. There was the minimum necessary to boot a Nova
instance:&lt;/p&gt;</description></item><item><title>Migrating Cinder volumes between OpenStack environments using shared NFS storage</title><link>https://blog.oddbit.com/post/2015-09-29-migrating-cinder-volumes-betwe/</link><pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-09-29-migrating-cinder-volumes-betwe/</guid><description>&lt;p&gt;Many of the upgrade guides for OpenStack focus on in-place upgrades to
your OpenStack environment. Some organizations may opt for a less
risky (but more hardware intensive) option of setting up a parallel
environment, and then migrating data into the new environment. In
this article, we look at how to use Cinder backups with a shared NFS
volume to facilitate the migration of Cinder volumes between two
different OpenStack environments.&lt;/p&gt;</description></item><item><title>Provider external networks (in an appropriate amount of detail)</title><link>https://blog.oddbit.com/post/2015-08-13-provider-external-networks-det/</link><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-08-13-provider-external-networks-det/</guid><description>&lt;p&gt;In &lt;a href="https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/"&gt;Quantum in Too Much Detail&lt;/a&gt;, I discussed the architecture of a
Neutron deployment in detail. Since that article was published,
Neutron gained the ability to handle multiple external networks with a
single L3 agent. While I &lt;a href="https://blog.oddbit.com/post/2014-05-28-multiple-external-networks-wit/"&gt;wrote about that&lt;/a&gt; back in 2014, I
covered the configuration side of it in much more detail than I
discussed the underlying network architecture. This post addresses
the architecture side.&lt;/p&gt;
&lt;h2 id="the-players"&gt;The players&lt;/h2&gt;
&lt;p&gt;This document describes the architecture that results from a
particular OpenStack configuration, specifically:&lt;/p&gt;</description></item><item><title>In which we are amazed it doesn't all fall apart</title><link>https://blog.oddbit.com/post/2015-07-26-in-which-we-are-amazed-it-does/</link><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-07-26-in-which-we-are-amazed-it-does/</guid><description>&lt;p&gt;So, the Kilo release notes say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nova-manage migrate-flavor-data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But nova-manage says:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nova-manage db migrate_flavor_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that says:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Missing arguments: max_number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the help says:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usage: nova-manage db migrate_flavor_data [-h]
 [--max-number &amp;lt;number&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which indicates that &amp;ndash;max-number is optional, but whatever, so you
try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nova-manage db migrate_flavor_data --max-number 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that says:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Missing arguments: max_number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So just for kicks you try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nova-manage db migrate_flavor_data --max_number 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that says:&lt;/p&gt;</description></item><item><title>OpenStack Networking without DHCP</title><link>https://blog.oddbit.com/post/2015-06-26-openstack-networking-without-d/</link><pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-06-26-openstack-networking-without-d/</guid><description>&lt;p&gt;In an OpenStack environment, &lt;a href="https://cloudinit.readthedocs.org/en/latest/"&gt;cloud-init&lt;/a&gt; generally fetches
information from the metadata service provided by Nova. It also has
support for reading this information from a &lt;em&gt;configuration drive&lt;/em&gt;,
which under OpenStack means a virtual CD-ROM device attached to your
instance containing the same information that would normally be
available via the metadata service.&lt;/p&gt;
&lt;p&gt;It is possible to generate your network configuration from this
configuration drive, rather than relying on the DHCP server provided
by your OpenStack environment. In order to do this you will need to
make the following changes to your Nova configuration:&lt;/p&gt;</description></item><item><title>Heat-kubernetes Demo with Autoscaling</title><link>https://blog.oddbit.com/post/2015-06-19-heatkubernetes-demo-with-autos/</link><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-06-19-heatkubernetes-demo-with-autos/</guid><description>&lt;p&gt;Next week is the &lt;a href="http://www.redhat.com/summit/"&gt;Red Hat Summit&lt;/a&gt; in Boston, and I&amp;rsquo;ll be taking part
in a &lt;a href="http://www.projectatomic.io/"&gt;Project Atomic&lt;/a&gt; presentation in which I will discuss various
(well, two) options for deploying Atomic into an OpenStack
environment, focusing on my &lt;a href="https://github.com/projectatomic/heat-kubernetes/"&gt;heat-kubernetes&lt;/a&gt; templates.&lt;/p&gt;
&lt;p&gt;As part of that presentation, I&amp;rsquo;ve put together a short demonstration video:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tS5X0qi04ZU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;This shows off the autoscaling behavior available with recent versions
of these templates (and also serves as a very brief introduction to
working with Kubernetes).&lt;/p&gt;</description></item><item><title>Diagnosing problems with an OpenStack deployment</title><link>https://blog.oddbit.com/post/2015-03-09-diagnosing-problems-with-an-op/</link><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-03-09-diagnosing-problems-with-an-op/</guid><description>&lt;p&gt;I recently had the chance to help a colleague debug some problems in
his OpenStack installation. The environment was unique because it was
booting virtualized &lt;a href="https://fedoraproject.org/wiki/Architectures/AArch64"&gt;aarch64&lt;/a&gt; instances, which at the time did not
have any PCI bus support&amp;hellip;which in turn precluded things like graphic
consoles (i.e., VNC or SPICE consoles) for the Nova instances.&lt;/p&gt;
&lt;p&gt;This post began life as an email summarizing the various configuration
changes we made on the systems to get things up and running. After
writing it, I decided it presented an interesting summary of some
common (and maybe not-so-common) issues, so I am posting it here in
the hopes that other folks will find it interesting.&lt;/p&gt;</description></item><item><title>Installing nova-docker with devstack</title><link>https://blog.oddbit.com/post/2015-02-11-installing-novadocker-with-dev/</link><pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-02-11-installing-novadocker-with-dev/</guid><description>&lt;p&gt;This is a long-form response to &lt;a href="https://ask.openstack.org/en/question/60679/installing-docker-on-openstack-with-ubuntu/"&gt;this question&lt;/a&gt;, and describes
how to get the &lt;a href="http://github.com/stackforge/nova-docker/"&gt;nova-docker&lt;/a&gt; driver up running with &lt;a href="http://devstack.org/"&gt;devstack&lt;/a&gt;
under Ubuntu 14.04 (Trusty). I wrote a &lt;a href="https://blog.oddbit.com/post/2015-02-06-installing-nova-docker-on-fedo/"&gt;similar post&lt;/a&gt; for Fedora
21, although that one was using the &lt;a href="http://openstack.redhat.com/"&gt;RDO&lt;/a&gt; Juno packages, while this
one is using &lt;a href="http://devstack.org/"&gt;devstack&lt;/a&gt; and the upstream sources.&lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting started&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll be using the &lt;a href="https://cloud-images.ubuntu.com/trusty/current/"&gt;Ubuntu 14.04 cloud image&lt;/a&gt; (because my test
environment runs on &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s install a few prerequisites:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get -y install git git-review python-pip python-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And generally make sure things are up-to-date:&lt;/p&gt;</description></item><item><title>Installing nova-docker on Fedora 21/RDO Juno</title><link>https://blog.oddbit.com/post/2015-02-06-installing-nova-docker-on-fedo/</link><pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-02-06-installing-nova-docker-on-fedo/</guid><description>&lt;p&gt;This post comes about indirectly by a request on IRC in &lt;code&gt;#rdo&lt;/code&gt; for help getting &lt;a href="https://github.com/stackforge/nova-docker"&gt;nova-docker&lt;/a&gt; installed on Fedora 21. I ran through the process from start to finish and decided to write everything down for posterity.&lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting started&lt;/h2&gt;
&lt;p&gt;I started with the &lt;a href="https://getfedora.org/en/cloud/download/"&gt;Fedora 21 Cloud Image&lt;/a&gt;, because I&amp;rsquo;m
installing onto OpenStack and the cloud images include
some features that are useful in this environment.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be using OpenStack packages from the &lt;a href="https://repos.fedorapeople.org/repos/openstack/openstack-juno/"&gt;RDO Juno&lt;/a&gt; repository.
Because there is often some skew between the RDO packages and the
current Fedora selinux policy, we&amp;rsquo;re going to start by putting SELinux
into permissive mode (sorry, Dan):&lt;/p&gt;</description></item><item><title>Filtering libvirt XML in Nova</title><link>https://blog.oddbit.com/post/2015-02-05-filtering-libvirt-xml-in-nova/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-02-05-filtering-libvirt-xml-in-nova/</guid><description>&lt;p&gt;I saw a request from a customer float by the other day regarding the
ability to filter the XML used to create Nova instances in libvirt.
The customer effectively wanted to blacklist a variety of devices (and
device types). The consensus seems to be &amp;ldquo;you can&amp;rsquo;t do this right now
and upstream is unlikely to accept patches that implement this
behavior&amp;rdquo;, but it sounded like an interesting problem, so&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/larsks/nova/tree/feature/xmlfilter"&gt;https://github.com/larsks/nova/tree/feature/xmlfilter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a fork of Nova (Juno) that includes support for an extensible
filtering mechanism that is applied to the generated XML before it
gets passed to libvirt.&lt;/p&gt;</description></item><item><title>Running nova-libvirt and nova-docker on the same host</title><link>https://blog.oddbit.com/post/2015-01-17-running-novalibvirt-and-novado/</link><pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-01-17-running-novalibvirt-and-novado/</guid><description>&lt;p&gt;I regularly use &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt; on my laptop with &lt;a href="http://www.libvirt.org/"&gt;libvirt&lt;/a&gt; as my
hypervisor. I was interested in experimenting with recent versions of
the &lt;a href="https://github.com/stackforge/nova-docker"&gt;nova-docker&lt;/a&gt; driver, but I didn&amp;rsquo;t have a spare system available
on which to run the driver, and I use my regular &lt;code&gt;nova-compute&lt;/code&gt; service
often enough that I didn&amp;rsquo;t want to simply disable it temporarily in
favor of &lt;code&gt;nova-docker&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; As pointed out by &lt;em&gt;gustavo&lt;/em&gt; in the comments, running two
&lt;code&gt;neutron-openvswitch-agents&lt;/code&gt; on the same host &amp;ndash; as suggested in this
article &amp;ndash; is going to lead to nothing but sadness and doom. So
kids, don&amp;rsquo;t try this at home. I&amp;rsquo;m leaving the article here because I
think it still has some interesting bits.&lt;/p&gt;</description></item><item><title>Accessing the serial console of your Nova servers</title><link>https://blog.oddbit.com/post/2014-12-22-accessing-the-serial-console-o/</link><pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-12-22-accessing-the-serial-console-o/</guid><description>&lt;p&gt;One of the new features available in the Juno release of OpenStack is
support for &lt;a href="https://blueprints.launchpad.net/nova/&amp;#43;spec/serial-ports"&gt;serial console access to your Nova
servers&lt;/a&gt;. This post looks into how to configure the
serial console feature and then how to access the serial consoles of
your Nova servers.&lt;/p&gt;
&lt;h2 id="configuring-serial-console-support"&gt;Configuring serial console support&lt;/h2&gt;
&lt;p&gt;In previous release of OpenStack, read-only access to the serial
console of your servers was available through the
&lt;code&gt;os-getConsoleOutput&lt;/code&gt; server action (exposed via &lt;code&gt;nova console-log&lt;/code&gt; on
the command line). Most cloud-specific Linux images are configured
with a command line that includes something like &lt;code&gt;console=tty0 console=ttyS0,115200n81&lt;/code&gt;, which ensures that kernel output and other
messages are available on the serial console. This is a useful
mechanism for diagnosing problems in the event that you do not have
network access to a server.&lt;/p&gt;</description></item><item><title>Cloud-init and the case of the changing hostname</title><link>https://blog.oddbit.com/post/2014-12-10-cloudinit-and-the-case-of-the-/</link><pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-12-10-cloudinit-and-the-case-of-the-/</guid><description>&lt;h2 id="setting-the-stage"&gt;Setting the stage&lt;/h2&gt;
&lt;p&gt;I ran into a problem earlier this week deploying RDO Icehouse under
RHEL 6. My target systems were a set of libvirt guests deployed from
the RHEL 6 KVM guest image, which includes &lt;a href="https://cloudinit.readthedocs.org/en/latest/"&gt;cloud-init&lt;/a&gt; in order to
support automatic configuration in cloud environments. I take
advantage of this when using &lt;code&gt;libvirt&lt;/code&gt; by attaching a configuration
drive so that I can pass in ssh keys and a &lt;code&gt;user-data&lt;/code&gt; script.&lt;/p&gt;</description></item><item><title>Fedora Atomic, OpenStack, and Kubernetes (oh my)</title><link>https://blog.oddbit.com/post/2014-11-24-fedora-atomic-openstack-and-ku/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-11-24-fedora-atomic-openstack-and-ku/</guid><description>&lt;p&gt;While experimenting with &lt;a href="http://www.projectatomic.io/"&gt;Fedora Atomic&lt;/a&gt;, I was looking for an
elegant way to automatically deploy Atomic into an &lt;a href="http://openstack.org/"&gt;OpenStack&lt;/a&gt;
environment and then automatically schedule some &lt;a href="http://docker.com/"&gt;Docker&lt;/a&gt; containers
on the Atomic host. This post describes my solution.&lt;/p&gt;
&lt;p&gt;Like many other cloud-targeted distributions, Fedora Atomic runs
&lt;a href="http://cloudinit.readthedocs.org/"&gt;cloud-init&lt;/a&gt; when the system boots. We can take advantage of this
to configure the system at first boot by providing a &lt;code&gt;user-data&lt;/code&gt; blob
to Nova when we boot the instance. A &lt;code&gt;user-data&lt;/code&gt; blob can be as
simple as a shell script, and while we could arguably mash everything
into a single script it wouldn&amp;rsquo;t be particularly maintainable or
flexible in the face of different pod/service/etc descriptions.&lt;/p&gt;</description></item><item><title>Creating a Windows image for OpenStack</title><link>https://blog.oddbit.com/post/2014-11-15-creating-a-windows-image-for-o/</link><pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-11-15-creating-a-windows-image-for-o/</guid><description>&lt;p&gt;If you want to build a Windows image for use in your OpenStack
environment, you can follow &lt;a href="http://docs.openstack.org/image-guide/content/windows-image.html"&gt;the example in the official
documentation&lt;/a&gt;, or you can grab a Windows 2012r2
evaluation &lt;a href="http://www.cloudbase.it/ws2012r2/"&gt;pre-built image&lt;/a&gt; from the nice folks at &lt;a href="http://www.cloudbase.it/"&gt;CloudBase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The CloudBase-provided image is built using a set of scripts and
configuration files that CloudBase has &lt;a href="https://github.com/cloudbase/windows-openstack-imaging-tools/"&gt;made available on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The CloudBase repository is an excellent source of information, but I
wanted to understand the process myself. This post describes the
process I went through to establish an automated process for
generating a Windows image suitable for use with OpenStack.&lt;/p&gt;</description></item><item><title>Integrating custom code with Nova using hooks</title><link>https://blog.oddbit.com/post/2014-09-27-integrating-custom-code-with-n/</link><pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-27-integrating-custom-code-with-n/</guid><description>&lt;p&gt;Would you like to run some custom Python code when Nova creates and
destroys virtual instances on your compute hosts? This is possible
using Nova&amp;rsquo;s support for &lt;a href="http://docs.openstack.org/developer/nova/devref/hooks.html"&gt;hooks&lt;/a&gt;, but the existing documentation is
somewhat short on examples, so I&amp;rsquo;ve spent some time trying to get
things working.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/larsks/demo_nova_hooks"&gt;demo_nova_hooks&lt;/a&gt; repository contains a working example of the
techniques discussed in this article.&lt;/p&gt;
&lt;h2 id="whats-a-hook"&gt;What&amp;rsquo;s a hook?&lt;/h2&gt;
&lt;p&gt;A Nova &amp;ldquo;hook&amp;rdquo; is a mechanism that allows you to attach a class of your
own design to a particular function or method call in Nova. Your
class should define a &lt;code&gt;pre&lt;/code&gt; method (that will be called before the
method is called) and &lt;code&gt;post&lt;/code&gt; function (that will be called after the
method is called):&lt;/p&gt;</description></item><item><title>Heat Hangout</title><link>https://blog.oddbit.com/post/2014-09-05-heat-hangout/</link><pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-05-heat-hangout/</guid><description>&lt;p&gt;I ran a Google Hangout this morning on &lt;a href="https://plus.google.com/events/c9u4sjn7ksb8jrmma7vd25aok94"&gt;Deploying with Heat&lt;/a&gt;. You
can find the slides for the presentation on line &lt;a href="http://oddbit.com/rdo-hangout-heat-intro/#/"&gt;here&lt;/a&gt;, and the
Heat templates (as well as slide sources) are available &lt;a href="https://github.com/larsks/rdo-hangout-heat-intro/"&gt;on
github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions about the presentation, please feel free to
ping me on irc (&lt;code&gt;larsks&lt;/code&gt;).&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qH-qYE1Kmpg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Visualizing Heat stacks</title><link>https://blog.oddbit.com/post/2014-09-02-visualizing-heat-stacks/</link><pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-02-visualizing-heat-stacks/</guid><description>&lt;p&gt;I spent some time today learning about Heat &lt;a href="https://wiki.openstack.org/wiki/Heat/AutoScaling"&gt;autoscaling groups&lt;/a&gt;,
which are incredibly nifty but a little opaque from the Heat command
line, since commands such as &lt;code&gt;heat resource-list&lt;/code&gt; don&amp;rsquo;t recurse into
nested stacks. It is possible to introspect these resources (you can
pass the physical resource id of a nested stack to &lt;code&gt;heat resource-list&lt;/code&gt;, for example)&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;but I really like visualizing things, so I wrote a quick hack
called &lt;a href="http://github.com/larsks/dotstack"&gt;dotstack&lt;/a&gt; that will generate &lt;a href="http://en.wikipedia.org/wiki/DOT_%28graph_description_language%29"&gt;dot&lt;/a&gt; language output from a
Heat stack. You can process this with &lt;a href="http://www.graphviz.org/"&gt;Graphviz&lt;/a&gt; to produce output
like this, in which graph nodes are automatically colorized by
resource type:&lt;/p&gt;</description></item><item><title>Docker plugin bugs</title><link>https://blog.oddbit.com/post/2014-09-01-docker-plugin-bugs/</link><pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-01-docker-plugin-bugs/</guid><description>&lt;p&gt;This is a companion to my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for Heat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While writing that article, I encountered a number of bugs in the
Docker plugin and elsewhere. I&amp;rsquo;ve submitted patches for most of the
issues I encountered:&lt;/p&gt;
&lt;h2 id="bugs-in-the-heat-plugin"&gt;Bugs in the Heat plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364017"&gt;https://bugs.launchpad.net/heat/+bug/1364017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin fails to delete a container resource in
&lt;code&gt;CREATE_FAILED&lt;/code&gt; state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364041"&gt;https://bugs.launchpad.net/heat/+bug/1364041&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin &lt;code&gt;volumes_from&lt;/code&gt; parameter should be a list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364039"&gt;https://bugs.launchpad.net/heat/+bug/1364039&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin &lt;code&gt;volumes_from&lt;/code&gt; parameter results in an error&lt;/p&gt;</description></item><item><title>Annotated documentation for DockerInc::Docker::Container</title><link>https://blog.oddbit.com/post/2014-08-30-docker-contain-doc/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-docker-contain-doc/</guid><description>&lt;p&gt;This is a companion to my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for Heat&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dockerincdockercontainer"&gt;DockerInc::Docker::Container&lt;/h2&gt;
&lt;h3 id="properties"&gt;Properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt; : List&lt;/p&gt;
&lt;p&gt;Command to run after spawning the container.&lt;/p&gt;
&lt;p&gt;Optional property.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cmd: [ 'thttpd', '-C', '/etc/thttpd.conf', '-D', '-c', '*.cgi']
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dns&lt;/code&gt; : List&lt;/p&gt;
&lt;p&gt;Set custom DNS servers.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; dns:
 - 8.8.8.8
 - 8.8.4.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker_endopint&lt;/code&gt; : String&lt;/p&gt;
&lt;p&gt;Docker daemon endpoint. By default the local Docker daemon will
be used.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; docker_endpoint: tcp://192.168.1.100:2375
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; : String&lt;/p&gt;</description></item><item><title>Docker plugin for OpenStack Heat</title><link>https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/</guid><description>&lt;p&gt;I have been looking at both Docker and OpenStack recently. In my &lt;a href="https://blog.oddbit.com/post/2014-08-28-novadocker-and-environment-var/"&gt;last
post&lt;/a&gt; I talked a little about the &lt;a href="https://github.com/stackforge/nova-docker"&gt;Docker driver for Nova&lt;/a&gt;; in
this post I&amp;rsquo;ll be taking an in-depth look at the Docker plugin for
Heat, which has been available &lt;a href="https://blog.docker.com/2014/03/docker-will-be-in-openstack-icehouse/"&gt;since the Icehouse release&lt;/a&gt; but is
surprisingly under-documented.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://blog.docker.com/2014/03/docker-will-be-in-openstack-icehouse/"&gt;release announcement&lt;/a&gt; on the Docker blog includes an
example Heat template, but it is unfortunately grossly inaccurate and
has led many people astray. In particular:&lt;/p&gt;</description></item><item><title>Using wait conditions with Heat</title><link>https://blog.oddbit.com/post/2014-08-30-using-wait-conditions-with-hea/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-using-wait-conditions-with-hea/</guid><description>&lt;p&gt;This post accompanies my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for
Heat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order for &lt;code&gt;WaitCondition&lt;/code&gt; resources to operate correctly in Heat, you
will need to make sure that that you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created the necessary Heat domain and administrative user in
Keystone,&lt;/li&gt;
&lt;li&gt;Configured appropriate values in &lt;code&gt;heat.conf&lt;/code&gt; for
&lt;code&gt;stack_user_domain&lt;/code&gt;, &lt;code&gt;stack_domain_admin&lt;/code&gt;, and
&lt;code&gt;stack_domain_admin_password&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Configured an appropriate value in &lt;code&gt;heat.conf&lt;/code&gt; for
&lt;code&gt;heat_waitcondition_server_url&lt;/code&gt;. On a single-system install this
will often be pointed by default at &lt;code&gt;127.0.0.1&lt;/code&gt;, which, hopefully for
obvious reasons, won&amp;rsquo;t be of any use to your Nova servers.&lt;/li&gt;
&lt;li&gt;Enabled the &lt;code&gt;heat-api-cfn&lt;/code&gt; service,&lt;/li&gt;
&lt;li&gt;Configured your firewall to permit access to the CFN service (which
runs on port 8000).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Steve Hardy has a blog post on &lt;a href="http://hardysteven.blogspot.co.uk/2014/04/heat-auth-model-updates-part-2-stack.html"&gt;stack domain users&lt;/a&gt; that goes into
detail on configuring authentication for Heat and Keystone.&lt;/p&gt;</description></item><item><title>nova-docker and environment variables</title><link>https://blog.oddbit.com/post/2014-08-28-novadocker-and-environment-var/</link><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-28-novadocker-and-environment-var/</guid><description>&lt;p&gt;I&amp;rsquo;ve been playing with &lt;a href="https://docker.com/"&gt;Docker&lt;/a&gt; a bit recently, and decided to take
a look at the &lt;a href="https://github.com/stackforge/nova-docker"&gt;nova-docker&lt;/a&gt; driver for &lt;a href="http://openstack.org/"&gt;OpenStack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nova-docker&lt;/code&gt; driver lets Nova, the OpenStack Compute service,
spawn Docker containers instead of hypervisor-based servers. For
certain workloads, this leads to better resource utilization than you
would get with a hypervisor-based solution, while at the same time
givin you better support for multi-tenancy and flexible networking
than you get with Docker by itself.&lt;/p&gt;</description></item><item><title>Booting an instance with multiple fixed addresses</title><link>https://blog.oddbit.com/post/2014-05-28-booting-an-instance-with-multi/</link><pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-28-booting-an-instance-with-multi/</guid><description>&lt;p&gt;This article expands on my answer to &lt;a href="https://ask.openstack.org/en/question/30690/add-multiple-specific-ips-to-instance/"&gt;Add multiple specific IPs to
instance&lt;/a&gt;, a question posted to &lt;a href="https://ask.openstack.org/"&gt;ask.openstack.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to serve out SSL services from an OpenStack instance, you
will generally want one local ip address for each SSL virtual host you
support. It is possible to create an instance with multiple fixed
addresses, but there are a few complications to watch out for.&lt;/p&gt;
&lt;h1 id="assumptions"&gt;Assumptions&lt;/h1&gt;
&lt;p&gt;This article assumes that the following resources exist:&lt;/p&gt;</description></item><item><title>Multiple external networks with a single L3 agent</title><link>https://blog.oddbit.com/post/2014-05-28-multiple-external-networks-wit/</link><pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-28-multiple-external-networks-wit/</guid><description>&lt;p&gt;In the old days (so, like, last year), Neutron supported a single
external network per L3 agent. You would run something like this&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ neutron net-create external --router:external=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;and neutron would map this to the bridge defined in
&lt;code&gt;external_network_bridge&lt;/code&gt; in &lt;code&gt;/etc/neutron/l3_agent.ini&lt;/code&gt;. If you
wanted to support more than a single external network, you would need
to run multiple L3 agents, each with a unique value for
&lt;code&gt;external_network_bridge&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is now a better option available.&lt;/p&gt;</description></item><item><title>Video: Configuring OpenStack's external bridge on a single-interface system</title><link>https://blog.oddbit.com/post/2014-05-27-configuring-openstacks-externa/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-27-configuring-openstacks-externa/</guid><description>&lt;p&gt;I&amp;rsquo;ve just put a video on Youtube that looks at the steps required to
set up the external bridge (&lt;code&gt;br-ex&lt;/code&gt;) on a single-interface system:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8zFQG5mKwPk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Open vSwitch and persistent MAC addresses</title><link>https://blog.oddbit.com/post/2014-05-23-open-vswitch-and-persistent-ma/</link><pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-23-open-vswitch-and-persistent-ma/</guid><description>&lt;p&gt;Normally I like to post solutions, but today&amp;rsquo;s post is about a
vexing problem to which I have not been able to find a solution.&lt;/p&gt;
&lt;p&gt;This started as a simple attempt to set up external connectivity on
an all-in-one Icehouse install deployed on an OpenStack instance. I
wanted to add &lt;code&gt;eth0&lt;/code&gt; to &lt;code&gt;br-ex&lt;/code&gt; in order to model a typical method for
providing external connectivity, but I ran into a very odd problem:
the system would boot and work fine for a few seconds, but would then
promptly lose network connectivity.&lt;/p&gt;</description></item><item><title>Solved: Open vSwitch and persistent MAC addresses</title><link>https://blog.oddbit.com/post/2014-05-23-solved-open-vswitch-and-persis/</link><pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-23-solved-open-vswitch-and-persis/</guid><description>&lt;p&gt;In my &lt;a href="https://blog.oddbit.com/2014/05/23/open-vswitch-and-persistent-ma/"&gt;previous post&lt;/a&gt; I discussed a problem I was having setting a
persistent MAC address on an OVS bridge device. It looks like the
short answer is, &amp;ldquo;don&amp;rsquo;t use &lt;code&gt;ip link set ...&lt;/code&gt;&amp;rdquo; for this purpose.&lt;/p&gt;
&lt;p&gt;You can set the bridge MAC address via &lt;code&gt;ovs-vsctl&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ovs-vsctl set bridge br-ex other-config:hwaddr=$MACADDR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I&amp;rsquo;ve updated my &lt;code&gt;ifconfig-br-ex&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEVICE=br-ex
DEVICETYPE=ovs
TYPE=OVSBridge
ONBOOT=yes
OVSBOOTPROTO=dhcp
OVSDHCPINTERFACES=eth0
MACADDR=fa:16:3e:ef:91:ec
OVS_EXTRA=&amp;quot;set bridge br-ex other-config:hwaddr=$MACADDR&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;OVS_EXTRA&lt;/code&gt; parameter gets passed to the &lt;code&gt;add-br&lt;/code&gt; call like this:&lt;/p&gt;</description></item><item><title>Fedora and OVS Bridge Interfaces</title><link>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</guid><description>&lt;p&gt;I run OpenStack on my laptop, and I&amp;rsquo;ve been chasing down a pernicious
problem with OVS bridge interfaces under both F19 and F20. My
OpenStack environment relies on an OVS bridge device named &lt;code&gt;br-ex&lt;/code&gt; for
external connectivity and for making services available to OpenStack
instances, but after rebooting, &lt;code&gt;br-ex&lt;/code&gt; was consistently unconfigured,
which caused a variety of problems.&lt;/p&gt;
&lt;p&gt;This is the network configuration file for &lt;code&gt;br-ex&lt;/code&gt; on my system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEVICE=br-ex
DEVICETYPE=ovs
TYPE=OVSBridge
BOOTPROT=static
IPADDR=192.168.200.1
NETMASK=255.255.255.0
ONBOOT=yes
NM_CONTROLLED=no
ZONE=openstack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;ifup br-ex&lt;/code&gt; would also fail to configure the interface, but
running &lt;code&gt;ifdown br-ex; ifup br-ex&lt;/code&gt; would configure things
appropriately.&lt;/p&gt;</description></item><item><title>Firewalld, NetworkManager, and OpenStack</title><link>https://blog.oddbit.com/post/2014-05-20-firewalld-and-openstack/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-20-firewalld-and-openstack/</guid><description>&lt;p&gt;These are my notes on making OpenStack play well with &lt;a href="https://fedoraproject.org/wiki/FirewallD"&gt;firewalld&lt;/a&gt;
and &lt;a href="https://wiki.gnome.org/Projects/NetworkManager"&gt;NetworkManager&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="networkmanager"&gt;NetworkManager&lt;/h2&gt;
&lt;p&gt;By default, NetworkManager attempts to start a DHCP client on every
new available interface. Since booting a single instance in OpenStack
can result in the creation of several virtual interfaces, this results
in a lot of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;May 19 11:58:24 pk115wp-lkellogg NetworkManager[1357]: &amp;lt;info&amp;gt;
 Activation (qvb512640bd-ee) starting connection 'Wired connection 2'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can disable this behavior by adding the following to
&lt;code&gt;/etc/NetworkManager/NetworkManager.conf&lt;/code&gt;:&lt;/p&gt;</description></item><item><title>Flat networks with ML2 and OpenVSwitch</title><link>https://blog.oddbit.com/post/2014-05-19-flat-networks-with-ml-and-open/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-05-19-flat-networks-with-ml-and-open/</guid><description>&lt;p&gt;Due to an unfortunate incident involving sleep mode and an overheated
backpack I had the &amp;ldquo;opportunity&amp;rdquo; to rebuild my laptop. Since this meant
reinstalling OpenStack I used this as an excuse to finally move to the ML2
network plugin for Neutron.&lt;/p&gt;
&lt;p&gt;I was attempting to add an external network using the normal incantation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;neutron net-create external -- --router:external=true \
 --provider:network_type=flat \
 --provider:physical_network=physnet1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this command completed successfully, I was left without any
connectivity between &lt;code&gt;br-int&lt;/code&gt; and &lt;code&gt;br-ex&lt;/code&gt;, despite having in my
&lt;code&gt;/etc/neutron/plugins/ml2/ml2_conf.ini&lt;/code&gt;:&lt;/p&gt;</description></item><item><title>Multinode OpenStack with Packstack</title><link>https://blog.oddbit.com/post/2014-02-27-multinode-packstack/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-02-27-multinode-packstack/</guid><description>&lt;p&gt;I was the presenter for this morning&amp;rsquo;s &lt;a href="http://openstack.redhat.com/"&gt;RDO&lt;/a&gt; hangout, where I ran
through a simple demonstration of setting up a multinode OpenStack
deployment using &lt;a href="https://wiki.openstack.org/wiki/Packstack"&gt;packstack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The slides are online &lt;a href="http://goo.gl/Yvmd0P"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the video (also available on the &lt;a href="https://plus.google.com/events/cm9ff549vmsim737lj7hopk4gao"&gt;event page&lt;/a&gt;):&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/DGf-ny25OAw?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Show OVS external-ids</title><link>https://blog.oddbit.com/post/2014-01-19-show-ovs-externalids/</link><pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-01-19-show-ovs-externalids/</guid><description>&lt;p&gt;This is just here as a reminder for me:&lt;/p&gt;
&lt;p&gt;An OVS interface has a variety of attributes associated with it, including an
&lt;code&gt;external-id&lt;/code&gt; field that can be used to associate resources outside of
OpenVSwitch with the interface. You can view this field with the following
command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ovs-vsctl --columns=name,external-ids list Interface
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which on my system, with a single virtual instance, looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ovs-vsctl --columns=name,external-ids list Interface
.
.
.
name : &amp;quot;qvo519d7cc4-75&amp;quot;
external_ids : {attached-mac=&amp;quot;fa:16:3e:f7:75:b0&amp;quot;, iface-id=&amp;quot;519d7cc4-7593-4944-af7b-4056436f2d66&amp;quot;, iface-status=active, vm-uuid=&amp;quot;0330b084-03db-4d42-a231-2cd6ad89515b&amp;quot;}
.
.
.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the information contained here:&lt;/p&gt;</description></item><item><title>Stupid OpenStack Tricks</title><link>https://blog.oddbit.com/post/2014-01-16-stupid-openstack-tricks/</link><pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-01-16-stupid-openstack-tricks/</guid><description>&lt;p&gt;I work with several different OpenStack installations. I usually work
on the command line, sourcing in an appropriate &lt;code&gt;stackrc&lt;/code&gt; with
credentials as necessary, but occasionally I want to use the dashboard
for something.&lt;/p&gt;
&lt;p&gt;For all of the deployments with which I work, the keystone endpoint is
on the same host as the dashboard. So rather than trying to remember
which dashboard url I want for the environment I&amp;rsquo;m currently using on
the command line, I put together this shell script:&lt;/p&gt;</description></item><item><title>Direct access to Nova metadata</title><link>https://blog.oddbit.com/post/2014-01-14-direct-access-to-nova-metadata/</link><pubDate>Tue, 14 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-01-14-direct-access-to-nova-metadata/</guid><description>&lt;p&gt;When you boot a virtual instance under &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt;, your instance
has access to certain &lt;a href="http://docs.openstack.org/admin-guide-cloud/content//section_metadata-service.html"&gt;instance metadata&lt;/a&gt; via the Nova metadata service,
which is canonically available at &lt;a href="http://169.254.169.254/"&gt;http://169.254.169.254/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In an environment running &lt;a href="https://wiki.openstack.org/wiki/Neutron"&gt;Neutron&lt;/a&gt;, a request from your instance
must traverse a number of steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the instance to a router,&lt;/li&gt;
&lt;li&gt;Through a NAT rule in the router namespace,&lt;/li&gt;
&lt;li&gt;To an instance of the neutron-ns-metadata-proxy,&lt;/li&gt;
&lt;li&gt;To the actual Nova metadata service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When there are problem accessing the metadata, it can be helpful to
verify that the metadata service itself is configured correctly and
returning meaningful information.&lt;/p&gt;</description></item><item><title>RDO Bug Triage</title><link>https://blog.oddbit.com/post/2014-01-13-rdo-bug-triage/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-01-13-rdo-bug-triage/</guid><description>&lt;p&gt;This Wednesday, January 15, at 14:00 UTC (that&amp;rsquo;s 9AM US/Eastern, or
&lt;code&gt;date -d &amp;quot;14:00 UTC&amp;quot;&lt;/code&gt; in your local timezone) I will be helping out
with the
&lt;a href="http://openstack.redhat.com/"&gt;RDO&lt;/a&gt; &lt;a href="http://openstack.redhat.com/RDO-BugTriage"&gt;bug triage day&lt;/a&gt;. We&amp;rsquo;ll be trying to validate all the
&lt;a href="http://goo.gl/NqW2LN"&gt;untriaged bugs&lt;/a&gt; opened against RDO.&lt;/p&gt;
&lt;p&gt;Feel free to drop by on &lt;code&gt;#rdo&lt;/code&gt; and help out or ask questions.&lt;/p&gt;</description></item><item><title>Visualizing Neutron Networking with GraphViz</title><link>https://blog.oddbit.com/post/2013-12-23-visualizing-network-with-graph/</link><pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-12-23-visualizing-network-with-graph/</guid><description>&lt;p&gt;I&amp;rsquo;ve put together a few tools to help gather information about your
Neutron and network configuration and visualize it in different ways.
All of these tools are available as part of my &lt;a href="http://github.com/larsks/neutron-diag/"&gt;neutron-diag&lt;/a&gt;
repository on GitHub.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;m going to look at a tool that will help you visualize
the connectivity of network devices on your system.&lt;/p&gt;
&lt;h2 id="mk-network-dot"&gt;mk-network-dot&lt;/h2&gt;
&lt;p&gt;There are a lot of devices involved in your Neutron network
configuration. Information originating in one of your instances has
two traverse &lt;em&gt;at least&lt;/em&gt; seven network devices before seeing the light
of day. Understanding how everything connects is critical if you&amp;rsquo;re
trying to debug problems in your envionment.&lt;/p&gt;</description></item><item><title>An introduction to OpenStack Heat</title><link>https://blog.oddbit.com/post/2013-12-06-an-introduction-to-openstack-h/</link><pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-12-06-an-introduction-to-openstack-h/</guid><description>&lt;p&gt;&lt;a href="https://wiki.openstack.org/wiki/Heat"&gt;Heat&lt;/a&gt; is a template-based orchestration mechanism for use with
OpenStack. With Heat, you can deploy collections of resources &amp;ndash;
networks, servers, storage, and more &amp;ndash; all from a single,
parameterized template.&lt;/p&gt;
&lt;p&gt;In this article I will introduce Heat templates and the &lt;code&gt;heat&lt;/code&gt; command
line client.&lt;/p&gt;
&lt;h2 id="writing-templates"&gt;Writing templates&lt;/h2&gt;
&lt;p&gt;Because Heat began life as an analog of AWS &lt;a href="http://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;, it
supports the template formats used by the CloudFormation (CFN) tools.
It also supports its own native template format, called HOT (&amp;ldquo;Heat
Orchestration Templates&amp;rdquo;). In this article I will be using the HOT
template syntax, which is fully specified on &lt;a href="http://docs.openstack.org/developer/heat/template_guide/hot_spec.html"&gt;the OpenStack
website&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>A unified CLI for OpenStack</title><link>https://blog.oddbit.com/post/2013-11-22-a-unified-cli-for-op/</link><pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-22-a-unified-cli-for-op/</guid><description>&lt;p&gt;The &lt;a href="https://github.com/openstack/python-openstackclient"&gt;python-openstackclient&lt;/a&gt; project, by &lt;a href="https://github.com/dtroyer"&gt;Dean Troyer&lt;/a&gt; and
others, is a new command line tool to replace the existing command
line clients (including commands such as &lt;code&gt;nova&lt;/code&gt;, &lt;code&gt;keystone&lt;/code&gt;, &lt;code&gt;cinder&lt;/code&gt;,
etc).&lt;/p&gt;
&lt;p&gt;This tool solves two problems I&amp;rsquo;ve encountered in the past:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Command line options between different command line clients are
sometimes inconsistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output from the legacy command line tools is not designed to be
machine parse-able (and yet people &lt;a href="https://github.com/openstack/python-openstackclient"&gt;do it anyway&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new &lt;code&gt;openstack&lt;/code&gt; CLI framework is implement using the &lt;a href="https://github.com/dreamhost/cliff"&gt;cliff&lt;/a&gt;
module for Python, which will help enforce a consistent interface to
the various subcommands (because common options can be shared, and
just having everything in the same codebase will help tremendously).
Cliff also provides flexible table formatters. It includes a number
of useful formatters out of the box, and can be extended via
setuptools entry points.&lt;/p&gt;</description></item><item><title>json-tools: cli for generating and filtering json</title><link>https://blog.oddbit.com/post/2013-11-17-json-tools/</link><pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-17-json-tools/</guid><description>&lt;p&gt;Interacting with JSON-based APIs from the command line can be
difficult, and OpenStack is filled with REST APIs that consume or
produce JSON. I&amp;rsquo;ve just put pair of tools for generating and
filtering JSON on the command line, called collectively
&lt;a href="http://github.com/larsks/json-tools/"&gt;json-tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both make use of the Python &lt;a href="https://github.com/akesterson/dpath-python"&gt;dpath&lt;/a&gt; module to populate or filter
JSON objects.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;jsong&lt;/code&gt; command generates JSON on &lt;code&gt;stdout&lt;/code&gt;. You provide &lt;code&gt;/&lt;/code&gt;-delimited paths
on the command line to represent the JSON structure. For example, if
you run:&lt;/p&gt;</description></item><item><title>Quantum in Too Much Detail</title><link>https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/</link><pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/</guid><description>&lt;blockquote&gt;
&lt;p&gt;I originally posted this article on
the &lt;a href="http://openstack.redhat.com/Networking_in_too_much_detail"&gt;RDO&lt;/a&gt;
website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="the-players"&gt;The players&lt;/h1&gt;
&lt;p&gt;This document describes the architecture that results from a
particular OpenStack configuration, specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quantum networking using GRE tunnels;&lt;/li&gt;
&lt;li&gt;A dedicated network controller;&lt;/li&gt;
&lt;li&gt;A single instance running on a compute host&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Much of the document will be relevant to other configurations, but
details will vary based on your choice of layer 2 connectivity, number
of running instances, and so forth.&lt;/p&gt;
&lt;p&gt;The examples in this document were generated on a system with Quantum
networking but will generally match what you see under Neutron as
well, if you replace &lt;code&gt;quantum&lt;/code&gt; by &lt;code&gt;neutron&lt;/code&gt; in names. The OVS flow
rules under Neutron are somewhat more complex and I will cover those
in another post.&lt;/p&gt;</description></item><item><title>A random collection of OpenStack Tools</title><link>https://blog.oddbit.com/post/2013-11-12-a-random-collection/</link><pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-12-a-random-collection/</guid><description>&lt;p&gt;I&amp;rsquo;ve been working with &lt;a href="http://openstack.org/"&gt;OpenStack&lt;/a&gt; a lot recently, and I&amp;rsquo;ve ended up with a small collection of utilities that make my life easier. On the odd chance that they&amp;rsquo;ll make your life easier, too, I thought I&amp;rsquo;d hilight them here.&lt;/p&gt;
&lt;h2 id="crux"&gt;Crux&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://github.com/larsks/crux"&gt;Crux&lt;/a&gt; is a tool for provisioning tenants, users, and roles in keystone. Instead of a sequence of keystone command, you can provision new tenants, users, and roles with a single comand.&lt;/p&gt;</description></item><item><title>Why does the Neutron documentation recommend three interfaces?</title><link>https://blog.oddbit.com/post/2013-10-28-why-does-the-neutron/</link><pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-10-28-why-does-the-neutron/</guid><description>&lt;p&gt;The &lt;a href="http://docs.openstack.org/havana/install-guide/install/yum/content/neutron-install.dedicated-network-node.html"&gt;documentation for configuring Neutron&lt;/a&gt; recommends
that a network controller has three physical interfaces:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before you start, set up a machine to be a dedicated network node.
Dedicated network nodes should have the following NICs: the
management NIC (called MGMT_INTERFACE), the data NIC (called
DATA_INTERFACE), and the external NIC (called EXTERNAL_INTERFACE).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;People occasionally ask, &amp;ldquo;why three interfaces? What if I only have
two?&amp;rdquo;, so I wanted to provide an extended answer that might help
people understand what the interfaces are for and what trade-offs are
involved in using fewer interfaces.&lt;/p&gt;</description></item><item><title>Automatic configuration of Windows instances in OpenStack, part 1</title><link>https://blog.oddbit.com/post/2012-11-04-openstack-windows-config-part1/</link><pubDate>Sun, 04 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2012-11-04-openstack-windows-config-part1/</guid><description>&lt;p&gt;This is the first of two articles in which I discuss my work in
getting some Windows instances up and running in our &lt;a href="http://www.openstack.org/"&gt;OpenStack&lt;/a&gt;
environment. This article is primarily about problems I encountered
along the way.&lt;/p&gt;
&lt;h2 id="motivations"&gt;Motivations&lt;/h2&gt;
&lt;p&gt;Like many organizations, we have a mix of Linux and Windows in our
environment. Some folks in my group felt that it would be nice to let
our Windows admins take advantage of OpenStack for prototyping and
sandboxing in the same ways our Linux admins can use it.&lt;/p&gt;</description></item><item><title>Chasing OpenStack idle connection timeouts</title><link>https://blog.oddbit.com/post/2012-07-30-openstack-idle-connection-time/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2012-07-30-openstack-idle-connection-time/</guid><description>&lt;h2 id="the-original-problem"&gt;The original problem&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve recently spent some time working on an OpenStack deployment. I ran into a
problem in which the &lt;a href="http://docs.openstack.org/trunk/openstack-compute/starter/content/Compute_Worker_nova-compute_-d1e232.html"&gt;compute service&lt;/a&gt; would frequently stop communicating
with the &lt;a href="http://www.amqp.org/"&gt;AMQP&lt;/a&gt; message broker (&lt;code&gt;qpidd&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In order to gather some data on the problem, I ran the following simple test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait &lt;code&gt;n&lt;/code&gt; minutes&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nova boot ...&lt;/code&gt; to create an instance&lt;/li&gt;
&lt;li&gt;Wait a minute and see if the new instance becomes &lt;code&gt;ACTIVE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it works, delete the instance, set &lt;code&gt;n&lt;/code&gt; = &lt;code&gt;2n&lt;/code&gt; and repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This demonstrated that communication was failing after about an hour, which
correlates rather nicely with the idle connection timeout on the firewall.&lt;/p&gt;</description></item></channel></rss>