<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/nginx/</link><description>Recent content in nginx on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Fri, 17 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/nginx/rss.xml" rel="self" type="application/rss+xml"/><item><title>Applying custom configuration to Nginx Gateway Fabric</title><link>https://blog.oddbit.com/post/2023-11-17-nginx-gateway-configuration/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2023-11-17-nginx-gateway-configuration/</guid><description>In this post, we take a look at how to apply custom Nginx configuration directives when you&amp;rsquo;re using the NGINX Gateway Fabric.
What&amp;rsquo;s the NGINX Gateway Fabric? The NGINX Gateway Fabric is an implementation of the Kubernetes Gateway API.
What&amp;rsquo;s the Gateway API? The Gateway API is an evolution of the Ingress API; it aims to provide a flexible mechanism for managing north/south network traffic (that is, traffic entering or exiting your Kubernetes cluster), with additional work to support east/west traffic (traffic between pods in your cluster).</description><content>&lt;p>In this post, we take a look at how to apply custom Nginx configuration directives when you&amp;rsquo;re using the &lt;a href="https://github.com/nginxinc/nginx-gateway-fabric">NGINX Gateway Fabric&lt;/a>.&lt;/p>
&lt;h2 id="whats-the-nginx-gateway-fabric">What&amp;rsquo;s the NGINX Gateway Fabric?&lt;/h2>
&lt;p>The NGINX Gateway Fabric is an implementation of the Kubernetes &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>.&lt;/p>
&lt;h2 id="whats-the-gateway-api">What&amp;rsquo;s the Gateway API?&lt;/h2>
&lt;p>The Gateway API is an evolution of the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Ingress&lt;/a> API; it aims to provide a flexible mechanism for managing north/south network traffic (that is, traffic entering or exiting your Kubernetes cluster), with additional work to support east/west traffic (traffic between pods in your cluster).&lt;/p>
&lt;h2 id="whats-this-about-custom-configuration">What&amp;rsquo;s this about custom configuration?&lt;/h2>
&lt;p>I&amp;rsquo;ve deployed a local development cluster, and I wanted to be able to push images into an image registry hosted on the cluster. This requires (a) running a registry, which is easy, and (b) somehow exposing that registry outside the cluster, which is also easy unless you decide to make it more complex.&lt;/p>
&lt;p>In this case, I decided that rather than running an Ingress provider I was going to start familiarizing myself with the Gateway API, so I deployed NGINX Gateway Fabric. My first attempt at pushing an image into the registry looked like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ podman push --tls-verify=false example registry.apps.cluster1.house/example:latest
Getting image source signatures
Copying blob b9fe5313d237 done |
Copying blob cc2447e1835a done |
Copying blob cb8b0886acfb done |
Copying blob c4219a5645ea [===&amp;gt;----------------------------------] 9.3MiB / 80.2MiB | 372.7 MiB/s
Copying blob c6e5c62d1726 done |
Copying blob 9ee7eb11f876 done |
Copying blob f064c46326cb done |
Copying blob 9c45ffa2a02a done |
Copying blob 9a6c9897f309 done |
Copying blob 27a0dbb2828e done |
Error: writing blob: uploading layer chunked: StatusCode: 413, &amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;413 Request Entity Too Large&amp;lt;...
&lt;/code>&lt;/pre>&lt;p>Nginx, by default, restricts the maximum size of a request body to &lt;code>1m&lt;/code>, which is to say, 1 megabyte. You can increase (or remove) this limit by setting the &lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size">&lt;code>client_max_body_size&lt;/code>&lt;/a> parameter&amp;hellip;but how do you do this in the context of a managed deployment like the NGINX Gateway Fabric?&lt;/p>
&lt;h2 id="via-the-api">Via the API?&lt;/h2>
&lt;p>As of this writing, there is no mechanism to apply custom configuration options via the API (although there is ongoing work to provide this, see issue &lt;a href="https://github.com/nginxinc/nginx-gateway-fabric/issues/1258">#1258&lt;/a>).&lt;/p>
&lt;h2 id="what-about-dropping-a-config-file-into-confd">What about dropping a config file into conf.d?&lt;/h2>
&lt;p>My first thought was that I could mount a custom configuration file into &lt;code>/etc/nginx/conf.d&lt;/code>, along the lines of:&lt;/p>
&lt;pre tabindex="0">&lt;code>...
containers:
- name: nginx
volumeMounts:
- name: nginx-extra-conf
mountPath: /etc/nginx/conf.d/client_max_body_size.conf
subPath: client_max_body_size
...
volumes:
- name: nginx-extra-conf
configMap:
name: nginx-extra-conf
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;but this fails because the Nginx controller &lt;a href="https://github.com/nginxinc/nginx-gateway-fabric/blob/7de105c7dd09ccfca5823d6941ac12c520257221/internal/mode/static/manager.go#L123-L129">explicitly cleans out that directory on startup&lt;/a> and is unhappy if it is unable to delete a file.&lt;/p>
&lt;h2 id="replacing-nginxconf">Replacing nginx.conf&lt;/h2>
&lt;p>Right now, the solution is to replace &lt;code>/etc/nginx/nginx.conf&lt;/code>. This is a relatively simple operation using &lt;a href="https://kustomize.io">kustomize&lt;/a> to apply a patch to the deployment manifests.&lt;/p>
&lt;h3 id="grab-the-original-configuration">Grab the original configuration&lt;/h3>
&lt;p>First, we need to retrieve the &lt;em>original&lt;/em> &lt;code>nginx.conf&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir configs
podman run --rm --entrypoint cat \
ghcr.io/nginxinc/nginx-gateway-fabric/nginx:1.0.0 /etc/nginx/nginx.conf &amp;gt; configs/nginx.conf
&lt;/code>&lt;/pre>&lt;p>Modify &lt;code>configs/nginx.conf&lt;/code> as necessary; in my case, I added the following line to the &lt;code>http&lt;/code> section:&lt;/p>
&lt;pre tabindex="0">&lt;code>client_max_body_size 0;
&lt;/code>&lt;/pre>&lt;h3 id="patch-the-deployment">Patch the deployment&lt;/h3>
&lt;p>We can deploy the stock NGINX Gateway Fabric with a &lt;code>kustomization.yaml&lt;/code> file like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
commonLabels:
nginxGatewayVersion: v1.0.0
resources:
- https://github.com/nginxinc/nginx-gateway-fabric/releases/download/v1.0.0/crds.yaml
- https://github.com/nginxinc/nginx-gateway-fabric/releases/download/v1.0.0/nginx-gateway.yaml
- https://raw.githubusercontent.com/nginxinc/nginx-gateway-fabric/v1.0.0/deploy/manifests/service/nodeport.yaml
&lt;/code>&lt;/pre>&lt;p>To patch the Deployment resource, we extend the &lt;code>kustomization.yaml&lt;/code> with the following patch:&lt;/p>
&lt;pre tabindex="0">&lt;code>patches:
- patch: |
apiVersion: apps/v1
kind: Deployment
metadata:
name: nginx-gateway
namespace: nginx-gateway
spec:
template:
spec:
containers:
- name: nginx
volumeMounts:
- mountPath: /etc/nginx/nginx.conf
name: nginx-conf-override
subPath: nginx.conf
volumes:
- name: nginx-conf-override
configMap:
name: nginx-conf-override
&lt;/code>&lt;/pre>&lt;p>And then we add a &lt;code>confdigMapGenerator&lt;/code> to generate the &lt;code>nginx-conf-override&lt;/code> ConfigMap:&lt;/p>
&lt;pre tabindex="0">&lt;code>configMapGenerator:
- name: nginx-conf-override
namespace: nginx-gateway
options:
disableNameSuffixHash: true
files:
- configs/nginx.conf
&lt;/code>&lt;/pre>&lt;p>Now when we deploy from this directory&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl apply -k . --server-side
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;the deployment includes our patched &lt;code>nginx.conf&lt;/code> and we are able to successfully push images into the cluster registry.&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;ve included the complete &lt;a href="kustomization.yaml">&lt;code>kustomization.yaml&lt;/code>&lt;/a> alongside this post.&lt;/p></content></item></channel></rss>