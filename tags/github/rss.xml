<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/github/</link><description>Recent content in Github on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/github/rss.xml" rel="self" type="application/rss+xml"/><item><title>Delete GitHub workflow runs using the gh cli</title><link>https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/</guid><description>&lt;p&gt;Hello, future me. This is for you next time you want to do this.&lt;/p&gt;
&lt;p&gt;When setting up the CI for a project I will sometimes end up with a tremendous clutter of workflow runs. Sometimes they have embarrassing mistakes. Who wants to show that to people? I was trying to figure out how to bulk delete workflow runs from the CLI, and I came up with something that works:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;gh run list --json databaseId -q &amp;#39;.[].databaseId&amp;#39; |
 xargs -IID gh api \
 &amp;#34;repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID&amp;#34; \
 -X DELETE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will delete &lt;em&gt;all&lt;/em&gt; (well, up to 20, or whatever you set in &lt;code&gt;--limit&lt;/code&gt;) your workflow runs. You can add flags to &lt;code&gt;gh run list&lt;/code&gt; to filter runs by workflow or by triggering user.&lt;/p&gt;</description></item><item><title>Git Etiquette: Commit messages and pull requests</title><link>https://blog.oddbit.com/post/2019-06-14-git-etiquette-commit-messages/</link><pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-06-14-git-etiquette-commit-messages/</guid><description>&lt;h2 id="always-work-on-a-branch-never-commit-on-master"&gt;Always work on a branch (never commit on master)&lt;/h2&gt;
&lt;p&gt;When working with an upstream codebase, always make your changes on a feature branch rather than your local &lt;code&gt;master&lt;/code&gt; branch. This will make it easier to keep your local &lt;code&gt;master&lt;/code&gt; branch current with respect to upstream, and can help avoid situations in which you accidentally overwrite your local changes or introduce unnecessary merge commits into your history.&lt;/p&gt;
&lt;h2 id="rebase-instead-of-merge"&gt;Rebase instead of merge&lt;/h2&gt;
&lt;p&gt;If you need to incorporate changes from the upstream &lt;code&gt;master&lt;/code&gt; branch in the feature branch on which you are currently doing, bring in those changes using &lt;code&gt;git rebase&lt;/code&gt; rather than &lt;code&gt;git merge&lt;/code&gt;. This process will generally start by ensuring that your local copy of the upstream &lt;code&gt;master&lt;/code&gt; is current:&lt;/p&gt;</description></item><item><title>New comment system</title><link>https://blog.oddbit.com/post/2019-05-07-new-comment-system/</link><pubDate>Tue, 07 May 2019 09:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-05-07-new-comment-system/</guid><description>&lt;p&gt;As long as I&amp;rsquo;m switching site generators, it seems like a good idea to refresh the comment system as well. I&amp;rsquo;ve been using &lt;a href="https://disqus.com"&gt;Disqus&lt;/a&gt; for a while, since when I started it was one of the only games in town. There are now alternatives of different sorts, and one in particular caught my eye: &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; uses GitHub issues for storing comments, which seems like a fantastic idea.&lt;/p&gt;
&lt;p&gt;That means that comments will finally be stored in the same place as the blog content, which I think is a happy state of affairs.&lt;/p&gt;</description></item></channel></rss>