<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systemd on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/systemd/</link><description>Recent content in Systemd on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/systemd/rss.xml" rel="self" type="application/rss+xml"/><item><title>A systemd-nspawn connection driver for Ansible</title><link>https://blog.oddbit.com/post/2016-02-08-a-systemd-nspawn-connection-dr/</link><pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-02-08-a-systemd-nspawn-connection-dr/</guid><description>&lt;p&gt;I wrote &lt;a href="https://blog.oddbit.com/post/2016-02-07-systemd-nspawn-for-fun-and-wel/"&gt;earlier&lt;/a&gt; about &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;systemd-nspawn&lt;/a&gt;, and how it can take much
of the fiddly work out of setting up functional &lt;code&gt;chroot&lt;/code&gt; environments.
I&amp;rsquo;m a regular &lt;a href="http://ansible.com/"&gt;Ansible&lt;/a&gt; user, and I wanted to be able to apply some
of those techniques to my playbooks.&lt;/p&gt;
&lt;p&gt;Ansible already has a &lt;code&gt;chroot&lt;/code&gt; module, of course, but for some
situations &amp;ndash; such as targeting an emulated &lt;code&gt;chroot&lt;/code&gt; environment &amp;ndash;
that just means a lot of extra work. Using &lt;code&gt;systemd-nspawn&lt;/code&gt; makes
this trivial.&lt;/p&gt;</description></item><item><title>Systemd-nspawn for fun and...well, mostly for fun</title><link>https://blog.oddbit.com/post/2016-02-07-systemd-nspawn-for-fun-and-wel/</link><pubDate>Sun, 07 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-02-07-systemd-nspawn-for-fun-and-wel/</guid><description>&lt;p&gt;&lt;code&gt;systemd-nspawn&lt;/code&gt; has been called &lt;a href="https://wiki.archlinux.org/index.php/Systemd-nspawn"&gt;&amp;ldquo;chroot on steroids&amp;rdquo;&lt;/a&gt;,
but if you think of it as &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; with a slightly different target
you wouldn&amp;rsquo;t be far wrong, either. It can be used to spawn containers
on your host, and has a variety of options for configuring the
containerized environment through the use of private networking, bind
mounts, capability controls, and a variety of other facilities that
give you flexible container management.&lt;/p&gt;
&lt;p&gt;There are many different ways in which it can be used. I&amp;rsquo;m going to
focus on one that&amp;rsquo;s a bit of a corner use case that I find
particularly interesting. In this article we&amp;rsquo;re going to explore how
we can use &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;systemd-nspawn&lt;/a&gt; to spawn lightweight containers for
architectures other than that of our host system.&lt;/p&gt;</description></item><item><title>Docker vs. PrivateTmp</title><link>https://blog.oddbit.com/post/2015-01-18-docker-vs-privatetmp/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-01-18-docker-vs-privatetmp/</guid><description>&lt;p&gt;While working with Docker &lt;a href="https://blog.oddbit.com/post/2015-01-17-running-novalibvirt-and-novado/"&gt;the other day&lt;/a&gt;, I ran into an
undesirable interaction between Docker and &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; services that
utilize the &lt;code&gt;PrivateTmp&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.exec.html#PrivateTmp="&gt;PrivateTmp&lt;/a&gt; directive, if &lt;code&gt;true&lt;/code&gt;, &amp;ldquo;sets up a new file system
namespace for the executed processes and mounts private &lt;code&gt;/tmp&lt;/code&gt; and
&lt;code&gt;/var/tmp&lt;/code&gt; directories inside it that is not shared by processes outside
of the namespace&amp;rdquo;. This is a great idea from a &lt;a href="https://danwalsh.livejournal.com/51459.html"&gt;security
perspective&lt;/a&gt;, but can cause some unanticipated consequences.&lt;/p&gt;
&lt;h2 id="the-problem-in-a-nutshell"&gt;The problem in a nutshell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start a Docker container:&lt;/p&gt;</description></item><item><title>Starting systemd services without blocking</title><link>https://blog.oddbit.com/post/2014-12-02-starting-systemd-services-with/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-12-02-starting-systemd-services-with/</guid><description>&lt;p&gt;Recently, I&amp;rsquo;ve been playing around with &lt;a href="https://blog.oddbit.com/post/2014-11-24-fedora-atomic-openstack-and-ku/"&gt;Fedora Atomic and
Kubernetes&lt;/a&gt;. I ran into a frustrating problem in which I
would attempt to start a service from within a script launched by
&lt;a href="http://cloudinit.readthedocs.org/"&gt;cloud-init&lt;/a&gt;, only to have have &lt;code&gt;systemctl&lt;/code&gt; block indefinitely
because the service I was attempting to start was dependent on
&lt;code&gt;cloud-init&lt;/code&gt; finishing first.&lt;/p&gt;
&lt;p&gt;It turns out that &lt;code&gt;systemctl&lt;/code&gt; has a flag meant exactly for this
situation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; --no-block
 Do not synchronously wait for the requested operation to finish. If
 this is not specified, the job will be verified, enqueued and
 systemctl will wait until it is completed. By passing this
 argument, it is only verified and enqueued.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replacing &lt;code&gt;systemctl start &amp;lt;service&amp;gt;&lt;/code&gt; with &lt;code&gt;systemctl start --no-block &amp;lt;service&amp;gt;&lt;/code&gt; has solved that particular problem.&lt;/p&gt;</description></item><item><title>Private /tmp directories in Fedora</title><link>https://blog.oddbit.com/post/2012-11-05-fedora-private-tmp/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2012-11-05-fedora-private-tmp/</guid><description>&lt;p&gt;I ran into an odd problem the other day: I was testing out some
configuration changes for a web application by dropping files into
&lt;code&gt;/tmp&lt;/code&gt; and pointing the application configuration at the appropriate
directory. Everything worked out great when testing it by hand&amp;hellip;but
when starting up the &lt;code&gt;httpd&lt;/code&gt; service, the application behaved as if it
was unable to find any of the files in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My first assumption was that had simply missed something obvious like
file permissions or that I had a typo in my configuration, but after
repeated checks and lots of testing it was obvious that something else
was going on.&lt;/p&gt;</description></item></channel></rss>