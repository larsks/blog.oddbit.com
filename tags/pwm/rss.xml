<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwm on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/pwm/</link><description>Recent content in Pwm on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/pwm/rss.xml" rel="self" type="application/rss+xml"/><item><title>Some notes on PWM on the Raspberry Pi</title><link>https://blog.oddbit.com/post/2017-09-26-some-notes-on-pwm-on-the-raspb/</link><pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-09-26-some-notes-on-pwm-on-the-raspb/</guid><description>&lt;p&gt;I was recently working on a project in which I wanted to drive a
simple &lt;a href="https://www.adafruit.com/product/160"&gt;piezo buzzer&lt;/a&gt; attached to a GPIO pin on a Raspberry Pi. I
was already using the &lt;a href="https://pypi.python.org/pypi/RPi.GPIO"&gt;RPi.GPIO&lt;/a&gt; module in my project so that seemed
like a logical place to start, but I ran into a few issues.&lt;/p&gt;
&lt;p&gt;You drive a piezo buzzer by generating a &lt;a href="https://learn.sparkfun.com/tutorials/pulse-width-modulation"&gt;PWM&lt;/a&gt; signal with the
appropriate frequency. The &lt;code&gt;RPi.GPIO&lt;/code&gt; module implements PWM via
software, which is tricky on a non-realtime system. It&amp;rsquo;s difficult to
get the timing completely accurate, which results in sounds that are a
little wobbly at best. Since I&amp;rsquo;m simply generating tones with a
buzzer (rather than, say, controlling a servo) this is mostly just an
annoyance.&lt;/p&gt;</description></item></channel></rss>