<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwm on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/pwm/</link><description>Recent content in pwm on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Tue, 26 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/pwm/rss.xml" rel="self" type="application/rss+xml"/><item><title>Some notes on PWM on the Raspberry Pi</title><link>https://blog.oddbit.com/post/2017-09-26-some-notes-on-pwm-on-the-raspb/</link><pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2017-09-26-some-notes-on-pwm-on-the-raspb/</guid><description>I was recently working on a project in which I wanted to drive a simple piezo buzzer attached to a GPIO pin on a Raspberry Pi. I was already using the RPi.GPIO module in my project so that seemed like a logical place to start, but I ran into a few issues.
You drive a piezo buzzer by generating a PWM signal with the appropriate frequency. The RPi.GPIO module implements PWM via software, which is tricky on a non-realtime system.</description><content>&lt;p>I was recently working on a project in which I wanted to drive a
simple &lt;a href="https://www.adafruit.com/product/160">piezo buzzer&lt;/a> attached to a GPIO pin on a Raspberry Pi. I
was already using the &lt;a href="https://pypi.python.org/pypi/RPi.GPIO">RPi.GPIO&lt;/a> module in my project so that seemed
like a logical place to start, but I ran into a few issues.&lt;/p>
&lt;p>You drive a piezo buzzer by generating a &lt;a href="https://learn.sparkfun.com/tutorials/pulse-width-modulation">PWM&lt;/a> signal with the
appropriate frequency. The &lt;code>RPi.GPIO&lt;/code> module implements PWM via
software, which is tricky on a non-realtime system. It&amp;rsquo;s difficult to
get the timing completely accurate, which results in sounds that are a
little wobbly at best. Since I&amp;rsquo;m simply generating tones with a
buzzer (rather than, say, controlling a servo) this is mostly just an
annoyance.&lt;/p>
&lt;p>The second more significant problem is that the &lt;code>RPi.GPIO&lt;/code> seems to be
buggy. After driving the buzzer a few times, my application would
invariable crash with a segmentation fault:&lt;/p>
&lt;pre>&lt;code>Program terminated with signal SIGSEGV, Segmentation fault.
#0 0x764cbc54 in output_gpio () from /usr/lib/python3/dist-packages/RPi/_GPIO.cpython-35m-arm-linux-gnueabihf.so
(gdb) bt
#0 0x764dac54 in output_gpio () from /usr/lib/python3/dist-packages/RPi/_GPIO.cpython-35m-arm-linux-gnueabihf.so
#1 0x764dc9bc in pwm_thread () from /usr/lib/python3/dist-packages/RPi/_GPIO.cpython-35m-arm-linux-gnueabihf.so
#2 0x00001000 in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb)
&lt;/code>&lt;/pre>
&lt;p>At this point, I started looking for alternatives. One option would
be to implement my own software PWM solution in my Python code, but
that would suffer from the same timing issues as the &lt;code>RPi.GPIO&lt;/code>
implementation. I knew that the Raspberry Pi has support for hardware
PWM, so I went looking for information on how to make use of that
feature.&lt;/p>
&lt;p>I found &lt;a href="http://www.jumpnowtek.com/rpi/Using-the-Raspberry-Pi-Hardware-PWM-timers.html">this article&lt;/a> which describes how to enable &lt;a href="https://www.kernel.org/doc/Documentation/pwm.txt">kernel
support for hardware PWM&lt;/a>. You can read the article for details, but if
you have a Raspberry Pi 3 running kernel 4.9 or later, the answer
boils down to:&lt;/p>
&lt;ul>
&lt;li>Edit &lt;code>/boot/config.txt&lt;/code>.&lt;/li>
&lt;li>Add the line &lt;code>dtoverlay=pwm-2chan&lt;/code>&lt;/li>
&lt;li>Save the file.&lt;/li>
&lt;li>Reboot.&lt;/li>
&lt;/ul>
&lt;p>After rebooting your Pi and you will have access to hardware PWM on (BCM) pins
18 and 19. You will find a new &lt;code>sysfs&lt;/code> directory
&lt;code>/sys/class/pwm/pwmchip0&lt;/code>, which operates much like the &lt;a href="https://www.kernel.org/doc/Documentation/gpio/sysfs.txt">sysfs support
for gpio&lt;/a>: there is a special file &lt;code>export&lt;/code> that you use to gain
access to PWN pins. To access pin 18:&lt;/p>
&lt;pre>&lt;code>echo 0 &amp;gt; export
&lt;/code>&lt;/pre>
&lt;p>To access pin 19:&lt;/p>
&lt;pre>&lt;code>echo 1 &amp;gt; export
&lt;/code>&lt;/pre>
&lt;p>Running the above will result in two new directories appearing,
&lt;code>/sys/class/pwm/pwmchip0/pwm0&lt;/code> and &lt;code>/sys/class/pwm/pwmchip0/pwm1&lt;/code>.
Each of these directories contains special files for controlling the
PWM output. Of interest in this case are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>duty_cycle&lt;/code> - set the duty cycle of the PWM signal.&lt;/li>
&lt;li>&lt;code>enable&lt;/code> - enable (write a &lt;code>1&lt;/code>) or disable (write a &lt;code>0&lt;/code>) PWM output.&lt;/li>
&lt;li>&lt;code>period&lt;/code> - set the period of the PWM signal.&lt;/li>
&lt;/ul>
&lt;p>Both &lt;code>duty_cycle&lt;/code> and &lt;code>period&lt;/code> expect values in nanoseconds. So, for
example, to emit a 440Hz tone, you first need to calculate the period
for that frequency:&lt;/p>
&lt;pre>&lt;code>period = 1 / frequency = 1 / 440 = (approx) .00227272 seconds
&lt;/code>&lt;/pre>
&lt;p>Then convert that into nanoseconds:&lt;/p>
&lt;pre>&lt;code>period = .00227272 * 1e+9 = 2272720
&lt;/code>&lt;/pre>
&lt;p>For a 50% duty cycle, just dive that number by 2:&lt;/p>
&lt;pre>&lt;code>duty_cycle = 2272720 / 2 = 1136360
&lt;/code>&lt;/pre>
&lt;p>Now, echo those values to the appropriate &lt;code>sysfs&lt;/code> files:&lt;/p>
&lt;pre>&lt;code>echo $period &amp;gt; /sys/class/pwm/pwmchip0/pwm1/period
echo $duty_cycle &amp;gt; /sys/class/pwm/pwmchip0/pwm1/duty_cycle
&lt;/code>&lt;/pre>
&lt;p>You&amp;rsquo;ll want to set &lt;code>period&lt;/code> first. The value of &lt;code>duty_cycle&lt;/code> must
always be lower than &lt;code>period&lt;/code>, so if you try setting &lt;code>duty_cycle&lt;/code>
first it&amp;rsquo;s possible you will get an error.&lt;/p>
&lt;p>To actually generate the tone, you need to enable the output:&lt;/p>
&lt;pre>&lt;code>echo 1 &amp;gt; /sys/class/pwm/pwmchip0/pwm1/enable
&lt;/code>&lt;/pre>
&lt;p>This all works great, but there is one problem: you need to be &lt;code>root&lt;/code>
to perform any of the above operations. This matches the default
behavior of the GPIO subsystem, but in that case there are standard
&lt;a href="https://www.freedesktop.org/software/systemd/man/udev.html">udev&lt;/a> rules that take care of granting permission to members of the
&lt;code>gpio&lt;/code> group. I was hoping to use the same solution for PWM. There
is a set of udev rules proposed at
&lt;a href="https://github.com/raspberrypi/linux/issues/1983">https://github.com/raspberrypi/linux/issues/1983&lt;/a>, but due to a
&lt;a href="https://www.spinics.net/lists/linux-pwm/msg06081.html">kernel issue&lt;/a>, no udev events are sent when exporting pins so the
rules have no impact on permissions in the &lt;code>pwm0&lt;/code> and &lt;code>pwm1&lt;/code>
directories.&lt;/p>
&lt;p>Until the necessary patch has merged, I&amp;rsquo;ve worked around this issue by
creating a systemd unit that takes care of exporting the pins and
setting permissions correctly. The unit is very simple:&lt;/p>
&lt;pre>&lt;code>[Unit]
Description=Configure PWM permissions
Before=myapp.service
[Service]
Type=oneshot
ExecStart=/usr/bin/rpi-configure-pwm
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>
&lt;p>And the corresponding script is:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
PWM=/sys/class/pwm/pwmchip0
echo 0 &amp;gt; ${PWM}/export
echo 1 &amp;gt; ${PWM}/export
chown -R root:gpio $PWM/*
chmod -R g+rwX $PWM/*
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>Before=myapp.service&lt;/code> in the unit file ensures that this unit
will run before my application starts up. To use the above, drop the
unit file into &lt;code>/etc/systemd/system/rpi-configure-pwm.service&lt;/code>, and
drop the script into &lt;code>/usr/bin/rpi-configure-pwm&lt;/code>. Don&amp;rsquo;t forget to
&lt;code>systemctl enable rpi-configure-pwm&lt;/code>.&lt;/p></content></item></channel></rss>