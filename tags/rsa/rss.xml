<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rsa on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/rsa/</link><description>Recent content in Rsa on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Mon, 09 May 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/rsa/rss.xml" rel="self" type="application/rss+xml"/><item><title>Signing data with ssh-agent</title><link>https://blog.oddbit.com/post/2011-05-09-signing-data-with-ssh-agent/</link><pubDate>Mon, 09 May 2011 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2011-05-09-signing-data-with-ssh-agent/</guid><description>This is follow-up to my previous post, Converting OpenSSH public keys.
OpenSSH allows one to use an agent that acts as a proxy to your private key. When using an agent &amp;ndash; particularly with agent forwarding enabled &amp;ndash; this allows you to authenticate to a remote host without having to (a) repeatedly type in your password or (b) expose an unencrypted private key to remote systems.
If one is temtped to use SSH keys as authentication credentials outside of ssh, one would ideally be able to take advantage of the ssh agent for these same reasons.</description><content>&lt;p>This is follow-up to my previous post, &lt;a href="http://blog.oddbit.com/2011/05/08/converting-openssh-public-keys/">Converting OpenSSH public keys&lt;/a>.&lt;/p>
&lt;p>OpenSSH allows one to use an &lt;em>agent&lt;/em> that acts as a proxy to your private key. When using an agent &amp;ndash; particularly with agent forwarding enabled &amp;ndash; this allows you to authenticate to a remote host without having to (a) repeatedly type in your password or (b) expose an unencrypted private key to remote systems.&lt;/p>
&lt;p>If one is temtped to use SSH keys as authentication credentials outside of ssh, one would ideally be able to take advantage of the ssh agent for these same reasons.&lt;/p>
&lt;p>This article discusses what is required to programmatically interact with the agent and with the OpenSSL libraries for signing data and verifying signatures.&lt;/p>
&lt;h4 id="signing-data-with-ssh-agent">Signing data with ssh-agent&lt;/h4>
&lt;p>The SSH agent does not provide clients with direct access to an unencrypted private key. Rather, it will accept data from the client and return the signature of the SHA1 hash of the data.&lt;/p>
&lt;p>The agent communicates over a unix socket using the &lt;a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL.agent?rev=HEAD;content-type=text%2Fplain">ssh agent protocol&lt;/a> defined in &lt;a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/authfd.h?rev=HEAD;content-type=text%2Fplain">authfd.h&lt;/a>. The Python &lt;a href="http://www.lag.net/paramiko/">Paramiko&lt;/a> libary (a pure-python implementation of ssh) includes support for interacting with an ssh agent.&lt;/p>
&lt;p>Signing data is very simple:&lt;/p>
&lt;pre>&lt;code>import hashlib
import paramiko.agent
data = 'something to sign'
data_sha1 = hashlib.sha1(data).digest()
a = paramiko.agent.Agent()
key = a.keys[0]
d = key.sign_ssh_data(None, data_sha1)
&lt;/code>&lt;/pre>
&lt;p>Internally, the agent computes the SHA1 digest for the data, signs this using the selected key, and returns a &lt;em>signature_blob&lt;/em> that varies depending on the key type in use. For an RSA signature, the result format is a series of (length, data) pairs, where the length is encoded as a four-byte unsigned integer. The response contains the following elements:&lt;/p>
&lt;ol>
&lt;li>algorithm name (ssh-rsa)&lt;/li>
&lt;li>rsa signature&lt;/li>
&lt;/ol>
&lt;p>For example, after signing some data using a 1024-bit private key, the value returned from sign_ssh_data looked like this:&lt;/p>
&lt;pre>&lt;code>0000000: 0000 0007 7373 682d 7273 6100 0000 8027 ....ssh-rsa....'
0000010: 953c 771c 5ee4 f4b0 9849 c061 0ac2 2adb .&amp;lt;w.^....I.a..*.
0000020: b53d 2bcb a545 8dbb d582 05e5 a916 6490 .=+..E........d.
0000030: 1b67 3210 9bfc c74d d0ad 5011 394b a3fe .g2....M..P.9K..
0000040: 96e2 910b bbfd 19cd 73e5 6720 503a 95e1 ........s.g P:..
0000050: 5b8b 63c4 14a3 ec3d bf57 846e f0b4 e66c [.c....=.W.n...l
0000060: ce5d 6327 6055 b4e2 3c14 c13f 8303 4b1a .]c'`U..&amp;lt;..?..K.
0000070: 7ce3 9f33 9e7c 7ca4 a97b 506d fa0b a39e |..3.||..{Pm....
0000080: cb53 befc d725 9cd1 a8af 6042 5ac8 01 .S...%....`BZ..
&lt;/code>&lt;/pre>
&lt;p>The first four bytes (0000 0007) are the length of the algorithm name (ssh-rsa). The next field is the length of the signature (0000 0080, or 128 bytes), followed by the signature data. This means we can extract the signature data like this:&lt;/p>
&lt;pre>&lt;code>parts = []
while d:
len = struct.unpack('&amp;gt;I', d[:4])[0]
bits = d[4:len+4]
parts.append(bits)
d = d[len+4:]
sig = parts[1]
open('signature', 'w').write(sig)
&lt;/code>&lt;/pre>
&lt;h4 id="signing-the-data-with-openssl">Signing the data with OpenSSL&lt;/h4>
&lt;h5 id="using-m2crypto">Using M2Crypto&lt;/h5>
&lt;p>You can accomplish the same thing using the &lt;a href="http://sandbox.rulemaker.net/ngps/m2/">M2Crypto&lt;/a> library for Python like this:&lt;/p>
&lt;pre>&lt;code>import hashlib
import M2Crypto.RSA
data = 'something to sign'
data_sha1 = hashlib.sha1(data).digest()
key = M2Crypto.RSA.load_key('testkey')
sig = key.sign(data_sha1)
open('signature', 'w').write(sig)
&lt;/code>&lt;/pre>
&lt;p>This assumes that testkey is the private key file corresponding to the first key loaded into your agent in the previous example.&lt;/p>
&lt;h5 id="using-the-command-line">Using the command line&lt;/h5>
&lt;p>You can also generate an equivalent signature using the OpenSSL command line tools:&lt;/p>
&lt;pre>&lt;code>echo -n 'something to sign' |
openssl sha1 -binary |
openssl pkeyutl -sign -inkey testkey -pkeyopt digest:sha1 &amp;gt; signature
&lt;/code>&lt;/pre>
&lt;p>Note that including -pkeyopt digest:sha1 is necessary to get a signature block that is compatible with the one returned by the ssh agent. The pkeyutl man page has this to say:&lt;/p>
&lt;blockquote>
&lt;p>In PKCS#1 padding if the message digest is not set then the supplied data is signed or verified directly instead of using a DigestInfo structure. If a digest is set then the a DigestInfo structure is used and its the length must correspond to the digest type.&lt;/p>
&lt;/blockquote>
&lt;h4 id="veryfying-the-data">Veryfying the data&lt;/h4>
&lt;p>You can verify the signature using the corresponding public key.&lt;/p>
&lt;h5 id="using-m2crypto-1">Using M2Crypto&lt;/h5>
&lt;p>This uses the &lt;a href="http://sandbox.rulemaker.net/ngps/m2/">M2Crypto&lt;/a> module to verify the signature computed in the previous step:&lt;/p>
&lt;pre>&lt;code>import hashlib
import M2Crypto.RSA
# let's pretend that you've read my previous blog post and have
# created an &amp;quot;sshkey&amp;quot; module for reading the ssh public key format.
import sshkey
data = 'something to sign'
data_sha1 = hashlib.sha1(data).digest()
# read the signature generated in the previous step
sig = open('signature').read()
e,n = sshkey.load_rsa_pub_key('testkey.pub')
key = M2Crypto.RSA.new_pub_key((
M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hex(e)[2:])),
M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hex(n)[2:])),
))
if key.verify(data_sha1, sig):
print 'Verified!'
else:
print 'Failed!'
&lt;/code>&lt;/pre>
&lt;p>If you have converted the ssh public key into a standard format, you could do this instead:&lt;/p>
&lt;pre>&lt;code>import hashlib
import M2Crypto.RSA
data = 'something to sign'
data_sha1 = hashlib.sha1(data).digest()
# read the signature generated in the previous step
sig = open('signature').read()
key = M2Crypto.RSA.load_pub_key('testkey.pubssl')
if key.verify(data_sha1, sig):
print 'Verified!'
else:
print 'Failed!'
&lt;/code>&lt;/pre>
&lt;h5 id="using-openssl">Using OpenSSL&lt;/h5>
&lt;p>We can do the same thing on the command line, but we&amp;rsquo;ll first need to convert the ssh public key into a format useful to OpenSSL. This is easy if you have the private key handy&amp;hellip;which we do:&lt;/p>
&lt;pre>&lt;code>openssl rsa -in testkey -pubout &amp;gt; testkey.pubssl
&lt;/code>&lt;/pre>
&lt;p>And now we can verify the signature:&lt;/p>
&lt;pre>&lt;code>echo 'something to sign' |
openssl sha1 -binary |
openssl pkeyutl -verify -sigfile signature \
-pubin -inkey testkey.pubssl -pkeyopt digest:sha1
&lt;/code>&lt;/pre></content></item><item><title>Converting OpenSSH public keys</title><link>https://blog.oddbit.com/post/2011-05-08-converting-openssh-public-keys/</link><pubDate>Sun, 08 May 2011 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2011-05-08-converting-openssh-public-keys/</guid><description>I&amp;rsquo;ve posted a followup to this article that discusses ssh-agent.
For reasons best left to another post, I wanted to convert an SSH public key into a PKCS#1 PEM-encoded public key. That is, I wanted to go from this:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD7EZn/BzP26AWk/Ts2ymjpTXuXRiEWIWn HFTilOTcuJ/P1HfOwiy4RHC1rv59Yh/E6jbTx623+OGySJWh1IS3dAEaHhcGKnJaikrBn3c cdoNVkAAuL/YD7FMG1Z0SjtcZS6MoO8Lb9pkq6R+Ok6JQjwCEsB+OaVwP9RnVA+HSYeyCVE 0KakLCbBJcD1U2aHP4+IH4OaXhZacpb9Ueja6NNfGrv558xTgfZ+fLdJ7cpg6wU8UZnVM1B JiUW5KFasc+2IuZR0+g/oJXaYwvW2T6XsMgipetCEtQoMAJ4zmugzHSQuFRYHw/7S6PUI2U 03glFmULvEV+qIxsVFT1ng3pj lars@tiamat.house To this:
-----BEGIN RSA PUBLIC KEY----- MIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu ERwta7+fWIfxOo208ett/jhskiVodSEt3QBGh4XBipyWopKwZ93HHaDVZAALi/2A +xTBtWdEo7XGUujKDvC2/aZKukfjpOiUI8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCw mwSXA9VNmhz+PiB+Dml4WWnKW/VHo2ujTXxq7+efMU4H2fny3Se3KYOsFPFGZ1TN QSYlFuShWrHPtiLmUdPoP6CV2mML1tk+l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P +0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6YwIDAQAB -----END RSA PUBLIC KEY----- If you have a recent version of OpenSSH (where recent means 5.</description><content>&lt;blockquote>
&lt;p>I&amp;rsquo;ve posted a &lt;a href="http://blog.oddbit.com/2011/05/09/signing-data-with-ssh-agent/">followup&lt;/a> to this article that discusses ssh-agent.&lt;/p>
&lt;/blockquote>
&lt;p>For reasons best left to another post, I wanted to convert an SSH public key into a PKCS#1 PEM-encoded public key. That is, I wanted to go from this:&lt;/p>
&lt;pre>&lt;code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD7EZn/BzP26AWk/Ts2ymjpTXuXRiEWIWn
HFTilOTcuJ/P1HfOwiy4RHC1rv59Yh/E6jbTx623+OGySJWh1IS3dAEaHhcGKnJaikrBn3c
cdoNVkAAuL/YD7FMG1Z0SjtcZS6MoO8Lb9pkq6R+Ok6JQjwCEsB+OaVwP9RnVA+HSYeyCVE
0KakLCbBJcD1U2aHP4+IH4OaXhZacpb9Ueja6NNfGrv558xTgfZ+fLdJ7cpg6wU8UZnVM1B
JiUW5KFasc+2IuZR0+g/oJXaYwvW2T6XsMgipetCEtQoMAJ4zmugzHSQuFRYHw/7S6PUI2U
03glFmULvEV+qIxsVFT1ng3pj lars@tiamat.house
&lt;/code>&lt;/pre>
&lt;p>To this:&lt;/p>
&lt;pre>&lt;code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu
ERwta7+fWIfxOo208ett/jhskiVodSEt3QBGh4XBipyWopKwZ93HHaDVZAALi/2A
+xTBtWdEo7XGUujKDvC2/aZKukfjpOiUI8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCw
mwSXA9VNmhz+PiB+Dml4WWnKW/VHo2ujTXxq7+efMU4H2fny3Se3KYOsFPFGZ1TN
QSYlFuShWrHPtiLmUdPoP6CV2mML1tk+l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P
+0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6YwIDAQAB
-----END RSA PUBLIC KEY-----
&lt;/code>&lt;/pre>
&lt;p>If you have a recent version of OpenSSH (where recent means 5.6 or later), you can just do this:&lt;/p>
&lt;pre>&lt;code>ssh-keygen -f key.pub -e -m pem
&lt;/code>&lt;/pre>
&lt;p>If you don&amp;rsquo;t have that, read on.&lt;/p>
&lt;h1 id="openssh-public-key-format">OpenSSH Public Key Format&lt;/h1>
&lt;p>The OpenSSH public key format is fully documented &lt;a href="http://tools.ietf.org/html/rfc4253#section-6.6">RFC 4253&lt;/a>. Briefly, an OpenSSH public key consists of three fields:&lt;/p>
&lt;ul>
&lt;li>The key type&lt;/li>
&lt;li>A chunk of PEM-encoded data&lt;/li>
&lt;li>A comment&lt;/li>
&lt;/ul>
&lt;p>What, you may ask, is PEM encoding? &lt;a href="http://en.wikipedia.org/wiki/Base64#Privacy-enhanced_mail">Privacy Enhanced Mail&lt;/a> (PEM) is a specific type of &lt;a href="http://en.wikipedia.org/wiki/Base64">Base64&lt;/a> encoding&amp;hellip;which is to say it is a way of representing binary data using only printable ASCII characters.&lt;/p>
&lt;p>For an ssh-rsa key, the PEM-encoded data is a series of (length, data) pairs. The length is encoded as four octets (in big-endian order). The values encoded are:&lt;/p>
&lt;ol>
&lt;li>algorithm name (one of (ssh-rsa, ssh-dsa)). This duplicates the key type in the first field of the public key.&lt;/li>
&lt;li>RSA exponent&lt;/li>
&lt;li>RSA modulus&lt;/li>
&lt;/ol>
&lt;p>For more information on how RSA works and what the exponent and modulus are used for, read the Wikipedia article on &lt;a href="http://en.wikipedia.org/wiki/RSA">RSA&lt;/a>.&lt;/p>
&lt;p>We can read this in with the following Python code:&lt;/p>
&lt;pre>&lt;code>import sys
import base64
import struct
# get the second field from the public key file.
keydata = base64.b64decode(
open('key.pub').read().split(None)[1])
parts = []
while keydata:
# read the length of the data
dlen = struct.unpack('&amp;gt;I', keydata[:4])[0]
# read in &amp;lt;length&amp;gt; bytes
data, keydata = keydata[4:dlen+4], keydata[4+dlen:]
parts.append(data)
&lt;/code>&lt;/pre>
&lt;p>This leaves us with an array that, for an RSA key, will look like:&lt;/p>
&lt;pre>&lt;code>['ssh-rsa', '...bytes in exponent...', '...bytes in modulus...']
&lt;/code>&lt;/pre>
&lt;p>We need to convert the character buffers currently holding &lt;em>e&lt;/em> (the exponent) and &lt;em>n&lt;/em> (the modulus) into numeric types. There may be better ways to do this, but this works:&lt;/p>
&lt;pre>&lt;code>e_val = eval('0x' + ''.join(['%02X' % struct.unpack('B', x)[0] for x in
parts[1]]))
n_val = eval('0x' + ''.join(['%02X' % struct.unpack('B', x)[0] for x in
parts[2]]))
&lt;/code>&lt;/pre>
&lt;p>We now have the RSA public key. The next step is to produce the appropriate output format.&lt;/p>
&lt;h1 id="pkcs1-public-key-format">PKCS#1 Public Key Format&lt;/h1>
&lt;p>Our target format is a PEM-encoded PKCS#1 public key.&lt;/p>
&lt;p>PKCS#1 is &amp;ldquo;the first of a family of standards called Public-Key Cryptography Standards (PKCS), published by RSA Laboratories.&amp;rdquo; (&lt;a href="http://en.wikipedia.org/wiki/PKCS1">Wikipedia&lt;/a>). You can identify a PKCS#1 PEM-encoded public key by the markers used to delimit the base64 encoded data:&lt;/p>
&lt;pre>&lt;code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
&lt;/code>&lt;/pre>
&lt;p>This is different from an x.509 public key, which looks like this:&lt;/p>
&lt;pre>&lt;code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
&lt;/code>&lt;/pre>
&lt;p>The x.509 format may be used to store keys generated using algorithms other than RSA.&lt;/p>
&lt;p>The data in a PKCS#1 key is encoded using DER, which is a set of rules for serializing ASN.1 data. For more information see:&lt;/p>
&lt;ul>
&lt;li>The WikiPedia entry for &lt;a href="http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules">Distinguished Encoding Rules&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://luca.ntop.org/Teaching/Appunti/asn1.html">A Layman&amp;rsquo;s Guide to a Subset of ASN.1, BER, and DER&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Basically, ASN.1 is a standard for describing abstract data types, and DER is a set of rules for transforming an ASN.1 data type into a series of octets.&lt;/p>
&lt;p>According to the &lt;a href="ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.asn">ASN module for PKCS#1&lt;/a>, a PKCS#1 public key looks like this:&lt;/p>
&lt;pre>&lt;code>RSAPublicKey ::= SEQUENCE {
modulus INTEGER, -- n
publicExponent INTEGER -- e
}
&lt;/code>&lt;/pre>
&lt;p>We can generate this from our key data using Python&amp;rsquo;s &lt;a href="http://pyasn1.sourceforge.net/">PyASN1&lt;/a> module:&lt;/p>
&lt;pre>&lt;code>from pyasn1.type import univ
pkcs1_seq = univ.Sequence()
pkcs1_seq.setComponentByPosition(0, univ.Integer(n_val))
pkcs1_seq.setComponentByPosition(1, univ.Integer(e_val))
&lt;/code>&lt;/pre>
&lt;h1 id="generating-the-output">Generating the output&lt;/h1>
&lt;p>Now that we have the DER encoded key, generating the output is easy:&lt;/p>
&lt;pre>&lt;code>from pyasn1.codec.der import encoder as der_encoder
print '-----BEGIN RSA PUBLIC KEY-----'
print base64.encodestring(der_encoder.encode(pkcs1_seq))
print '-----END RSA PUBLIC KEY-----'
&lt;/code>&lt;/pre>
&lt;h1 id="appendix-openssh-private-key-format">Appendix: OpenSSH private key format&lt;/h1>
&lt;p>Whereas the OpenSSH public key format is effectively &amp;ldquo;proprietary&amp;rdquo; (that is, the format is used only by OpenSSH), the private key is already stored as a PKCS#1 private key. This means that the private key can be manipulated using the OpenSSL command line tools.&lt;/p>
&lt;p>The clever folks among you may be wondering if, assuming we have the private key available, we could have skipped this whole exercise and simply extracted the public key in the correct format using the openssl command. We can come very close&amp;hellip;the following demonstrates how to extract the public key from the private key using openssl:&lt;/p>
&lt;pre>&lt;code>$ openssl rsa -in key -pubout
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo
6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsuERwta7+fWIfxOo208ett/jhskiVodSEt
3QBGh4XBipyWopKwZ93HHaDVZAALi/2A+xTBtWdEo7XGUujKDvC2/aZKukfjpOiU
I8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCwmwSXA9VNmhz+PiB+Dml4WWnKW/VHo2uj
TXxq7+efMU4H2fny3Se3KYOsFPFGZ1TNQSYlFuShWrHPtiLmUdPoP6CV2mML1tk+
l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P+0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6
YwIDAQAB
-----END PUBLIC KEY-----
&lt;/code>&lt;/pre>
&lt;p>So close! But this is in x.509 format, and even though the OpenSSL library supports PKCS#1 encoding, there is no mechanism to make the command line tools cough up this format.&lt;/p>
&lt;p>Additionally, I am trying for a solution that does not require the private key to be available, which means that in any case I will still have to parse the OpenSSH public key format.&lt;/p></content></item></channel></rss>