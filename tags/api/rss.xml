<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/api/</link><description>Recent content in Api on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Mon, 05 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/api/rss.xml" rel="self" type="application/rss+xml"/><item><title>Posting to Scriptogr.am using the API</title><link>https://blog.oddbit.com/post/2012-11-05-posting-via-api/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2012-11-05-posting-via-api/</guid><description>&lt;p>Scriptogr.am has a &lt;a href="http://scriptogr.am/dashboard/#api_documentation">very simple api&lt;/a> that allows one to &lt;code>POST&lt;/code> and
&lt;code>DELETE&lt;/code> articles. &lt;code>POST&lt;/code>ing an article will place it in the
appropriate Dropbox directory and make it available on your blog all
in one step.&lt;/p>
&lt;p>Here is how you could use this API via Curl:&lt;/p>
&lt;pre>&lt;code>curl \
-d app_key=$APP_KEY \
-d user_id=$USER_ID \
-d name=&amp;quot;${title:-$1}&amp;quot; \
--data-urlencode text@$tmpfile \
\
http://scriptogr.am/api/article/post/
&lt;/code>&lt;/pr</description><content>&lt;p>Scriptogr.am has a &lt;a href="http://scriptogr.am/dashboard/#api_documentation">very simple api&lt;/a> that allows one to &lt;code>POST&lt;/code> and
&lt;code>DELETE&lt;/code> articles. &lt;code>POST&lt;/code>ing an article will place it in the
appropriate Dropbox directory and make it available on your blog all
in one step.&lt;/p>
&lt;p>Here is how you could use this API via Curl:&lt;/p>
&lt;pre>&lt;code>curl \
-d app_key=$APP_KEY \
-d user_id=$USER_ID \
-d name=&amp;quot;${title:-$1}&amp;quot; \
--data-urlencode text@$tmpfile \
\
http://scriptogr.am/api/article/post/
&lt;/code>&lt;/pre>
&lt;p>This assumes that you&amp;rsquo;ve registered for an application key and that
you have configured the value into &lt;code>$APP_KEY&lt;/code> and your Scriptogr.am
user id into &lt;code>$USER_ID&lt;/code>.&lt;/p>
&lt;p>The &lt;code>name&lt;/code> attribute is both the title of your article &lt;em>and also&lt;/em> the
filename (normalized and with a &lt;code>.md&lt;/code> extension). Your article &lt;em>must
not&lt;/em> contain the metadata values that are allowed when you&amp;rsquo;re editing
files directly in the Dropbox directory.&lt;/p></content></item><item><title>Retrieving Blogger posts by post id</title><link>https://blog.oddbit.com/post/2010-01-29-retrieving-blogger-posts-by-po/</link><pubDate>Fri, 29 Jan 2010 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2010-01-29-retrieving-blogger-posts-by-po/</guid><description>&lt;p>I spent some time recently trying to figure out, using Google&amp;rsquo;s &lt;a href="http://code.google.com/apis/gdata/docs/2.0/basics.html">gdata&lt;/a> API, how to retrieve a post from a &lt;a href="http://www.blogger.com/">Blogger&lt;/a> blog if I know corresponding post id. As far as I can tell there is no obvious way of doing this, at least not using the gdata.blogger.client api, but after much nashing of teeth I came up with the following solution.&lt;/p>
&lt;p>Given client, a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.client.html">gdata.blogger.client&lt;/a> instance, and blog, a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.data.html">gdata.blogger.data.Blog&lt;/a> instance, the following code will return a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.data.html">gdata.blogger.data.BlogPost&lt;/a> instance:&lt;/p></description><content>&lt;p>I spent some time recently trying to figure out, using Google&amp;rsquo;s &lt;a href="http://code.google.com/apis/gdata/docs/2.0/basics.html">gdata&lt;/a> API, how to retrieve a post from a &lt;a href="http://www.blogger.com/">Blogger&lt;/a> blog if I know corresponding post id. As far as I can tell there is no obvious way of doing this, at least not using the gdata.blogger.client api, but after much nashing of teeth I came up with the following solution.&lt;/p>
&lt;p>Given client, a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.client.html">gdata.blogger.client&lt;/a> instance, and blog, a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.data.html">gdata.blogger.data.Blog&lt;/a> instance, the following code will return a &lt;a href="http://gdata-python-client.googlecode.com/svn/trunk/pydocs/gdata.blogger.data.html">gdata.blogger.data.BlogPost&lt;/a> instance:&lt;/p>
&lt;pre>&lt;code>post = client.get_feed(blog.get_post_link().href
+ '/%s' % post_id,
auth_token=client.auth_token,
desired_class=gdata.blogger.data.BlogPost)
&lt;/code>&lt;/pre>
&lt;p>I&amp;rsquo;m not sure if this is the canonical solution or not, but it appears to work for me.&lt;/p></content></item></channel></rss>