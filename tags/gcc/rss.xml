<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gcc on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/gcc/</link><description>Recent content in gcc on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Mon, 11 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/gcc/rss.xml" rel="self" type="application/rss+xml"/><item><title>In which I PEBKAC so you don't have to</title><link>https://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/</link><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/</guid><description>Say you have a simple bit of code:
#include &amp;lt;avr/io.h&amp;gt; #include &amp;lt;util/delay.h&amp;gt; #define LED_BUILTIN _BV(PORTB5) int main(void) { DDRB |= LED_BUILTIN; while (1) { PORTB |= LED_BUILTIN; // turn on led _delay_ms(1000); // delay 1s PORTB &amp;amp;= ~LED_BUILTIN; // turn off led _delay_ms(1000); // delay 1s } } You have a Makefile that compiles that into an object (.o) file like this:
avr-gcc -mmcu=atmega328p -DF_CPU=16000000 -Os -c blink.c If you were to forget to set the device type when compiling your .</description><content>&lt;p>Say you have a simple bit of code:&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;avr/io.h&amp;gt;
#include &amp;lt;util/delay.h&amp;gt;
#define LED_BUILTIN _BV(PORTB5)
int main(void)
{
DDRB |= LED_BUILTIN;
while (1)
{
PORTB |= LED_BUILTIN; // turn on led
_delay_ms(1000); // delay 1s
PORTB &amp;amp;= ~LED_BUILTIN; // turn off led
_delay_ms(1000); // delay 1s
}
}
&lt;/code>&lt;/pre>
&lt;p>You have a Makefile that compiles that into an object (&lt;code>.o&lt;/code>) file like this:&lt;/p>
&lt;pre>&lt;code>avr-gcc -mmcu=atmega328p -DF_CPU=16000000 -Os -c blink.c
&lt;/code>&lt;/pre>
&lt;p>If you were to forget to set the device type when compiling your &lt;code>.c&lt;/code> file into an object file (&lt;code>.o&lt;/code>), you would get a warning:&lt;/p>
&lt;pre>&lt;code>$ avr-gcc -DF_CPU=16000000 -Os -c blink.c
In file included from blink.c:1:0:
/usr/avr/include/avr/io.h:623:6: warning: #warning &amp;quot;device type not defined&amp;quot; [-Wcpp]
# warning &amp;quot;device type not defined&amp;quot;
^~~~~~~
&lt;/code>&lt;/pre>
&lt;p>But if you were to forget to set the device type when linking the final ELF binary, you would not be so lucky:&lt;/p>
&lt;pre>&lt;code>$ avr-gcc -o blink.elf blink.o
&amp;lt;...silence...&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>So you would, perhaps, be surprised when you flash this to your device and it doesn&amp;rsquo;t work. If you take a look at the assembly generated for the above command, it looks like this:&lt;/p>
&lt;pre>&lt;code>$ avr-objdump -d blink.elf
blink.elf: file format elf32-avr
Disassembly of section .text:
00000000 &amp;lt;main&amp;gt;:
0: 25 9a sbi 0x04, 5 ; 4
2: 2d 9a sbi 0x05, 5 ; 5
4: 2f e3 ldi r18, 0x3F ; 63
6: 8d e0 ldi r24, 0x0D ; 13
8: 93 e0 ldi r25, 0x03 ; 3
a: 21 50 subi r18, 0x01 ; 1
c: 80 40 sbci r24, 0x00 ; 0
e: 90 40 sbci r25, 0x00 ; 0
10: e1 f7 brne .-8 ; 0xa &amp;lt;__zero_reg__+0x9&amp;gt;
12: 00 c0 rjmp .+0 ; 0x14 &amp;lt;__zero_reg__+0x13&amp;gt;
14: 00 00 nop
16: 2d 98 cbi 0x05, 5 ; 5
18: 2f e3 ldi r18, 0x3F ; 63
1a: 8d e0 ldi r24, 0x0D ; 13
1c: 93 e0 ldi r25, 0x03 ; 3
1e: 21 50 subi r18, 0x01 ; 1
20: 80 40 sbci r24, 0x00 ; 0
22: 90 40 sbci r25, 0x00 ; 0
24: e1 f7 brne .-8 ; 0x1e &amp;lt;__zero_reg__+0x1d&amp;gt;
26: 00 c0 rjmp .+0 ; 0x28 &amp;lt;__zero_reg__+0x27&amp;gt;
28: 00 00 nop
2a: eb cf rjmp .-42 ; 0x2 &amp;lt;__zero_reg__+0x1&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>If you remember to include the device type:&lt;/p>
&lt;pre>&lt;code>$ avr-gcc -mmcu=atmega328p -o blink.elf blink.o
&lt;/code>&lt;/pre>
&lt;p>You instead get:&lt;/p>
&lt;pre>&lt;code>$ avr-objdump -d blink.elf
blink.elf: file format elf32-avr
Disassembly of section .text:
00000000 &amp;lt;__vectors&amp;gt;:
0: 0c 94 34 00 jmp 0x68 ; 0x68 &amp;lt;__ctors_end&amp;gt;
4: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
8: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
10: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
14: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
18: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
1c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
20: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
24: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
28: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
2c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
30: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
34: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
38: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
3c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
40: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
44: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
48: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
4c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
50: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
54: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
58: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
5c: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
60: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
64: 0c 94 3e 00 jmp 0x7c ; 0x7c &amp;lt;__bad_interrupt&amp;gt;
00000068 &amp;lt;__ctors_end&amp;gt;:
68: 11 24 eor r1, r1
6a: 1f be out 0x3f, r1 ; 63
6c: cf ef ldi r28, 0xFF ; 255
6e: d8 e0 ldi r29, 0x08 ; 8
70: de bf out 0x3e, r29 ; 62
72: cd bf out 0x3d, r28 ; 61
74: 0e 94 40 00 call 0x80 ; 0x80 &amp;lt;main&amp;gt;
78: 0c 94 56 00 jmp 0xac ; 0xac &amp;lt;_exit&amp;gt;
0000007c &amp;lt;__bad_interrupt&amp;gt;:
7c: 0c 94 00 00 jmp 0 ; 0x0 &amp;lt;__vectors&amp;gt;
00000080 &amp;lt;main&amp;gt;:
80: 25 9a sbi 0x04, 5 ; 4
82: 2d 9a sbi 0x05, 5 ; 5
84: 2f e3 ldi r18, 0x3F ; 63
86: 8d e0 ldi r24, 0x0D ; 13
88: 93 e0 ldi r25, 0x03 ; 3
8a: 21 50 subi r18, 0x01 ; 1
8c: 80 40 sbci r24, 0x00 ; 0
8e: 90 40 sbci r25, 0x00 ; 0
90: e1 f7 brne .-8 ; 0x8a &amp;lt;main+0xa&amp;gt;
92: 00 c0 rjmp .+0 ; 0x94 &amp;lt;main+0x14&amp;gt;
94: 00 00 nop
96: 2d 98 cbi 0x05, 5 ; 5
98: 2f e3 ldi r18, 0x3F ; 63
9a: 8d e0 ldi r24, 0x0D ; 13
9c: 93 e0 ldi r25, 0x03 ; 3
9e: 21 50 subi r18, 0x01 ; 1
a0: 80 40 sbci r24, 0x00 ; 0
a2: 90 40 sbci r25, 0x00 ; 0
a4: e1 f7 brne .-8 ; 0x9e &amp;lt;main+0x1e&amp;gt;
a6: 00 c0 rjmp .+0 ; 0xa8 &amp;lt;main+0x28&amp;gt;
a8: 00 00 nop
aa: eb cf rjmp .-42 ; 0x82 &amp;lt;main+0x2&amp;gt;
000000ac &amp;lt;_exit&amp;gt;:
ac: f8 94 cli
000000ae &amp;lt;__stop_program&amp;gt;:
ae: ff cf rjmp .-2 ; 0xae &amp;lt;__stop_program&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>You can see that this code includes things like the jump table, without which your code won&amp;rsquo;t run.&lt;/p>
&lt;p>The moral of this story is: don&amp;rsquo;t forget to set the device type.&lt;/p></content></item></channel></rss>