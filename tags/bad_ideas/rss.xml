<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bad_ideas on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/bad_ideas/</link><description>Recent content in Bad_ideas on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/bad_ideas/rss.xml" rel="self" type="application/rss+xml"/><item><title>Using tools badly: time shifting git commits with Workinghours</title><link>https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/</link><pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/</guid><description>&lt;p&gt;This is a terrible hack. If you are easily offended by bad ideas
implemented poorly, move along!&lt;/p&gt;
&lt;p&gt;You are working on a wonderful open source project&amp;hellip;but you are not
&lt;em&gt;supposed&lt;/em&gt; to be working on that project! You&amp;rsquo;re supposed to be doing
your &lt;em&gt;real&lt;/em&gt; work! Unfortunately, your extra-curricular activity is
well documented in the git history of your project for all to see:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/repo-before.png" alt="Heatmap of original commit history"&gt;&lt;/p&gt;
&lt;p&gt;And now your boss knows why the TPS reports are late. You need
&lt;a href="https://github.com/larsks/workinghours.git"&gt;workinghours&lt;/a&gt;, a terrible utility for doing awful things to your
repository history. &lt;a href="https://github.com/larsks/workinghours.git"&gt;Workinghours&lt;/a&gt; will programatically time shift
your git commits so that they appear to have happened within specified
time intervals (for example, &amp;ldquo;between 7PM and midnight&amp;rdquo;).&lt;/p&gt;</description></item><item><title>Fixing RPM with evil magic</title><link>https://blog.oddbit.com/post/2011-07-26-fixing-rpm-with-evil-magic/</link><pubDate>Tue, 26 Jul 2011 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2011-07-26-fixing-rpm-with-evil-magic/</guid><description>&lt;h1 id="fixing-rpmsign-with-evil-magic"&gt;Fixing rpmsign with evil magic&lt;/h1&gt;
&lt;p&gt;At my office we are developing a deployment mechanism for RPM packages. The
general workflow looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You build a source rpm on your own machine.&lt;/li&gt;
&lt;li&gt;You sign the rpm with your GPG key.&lt;/li&gt;
&lt;li&gt;You submit the source RPM to our buildserver.&lt;/li&gt;
&lt;li&gt;The buildserver validates your signature and then builds the package.&lt;/li&gt;
&lt;li&gt;The buildserver signs the package using a master signing key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last step in that sequence represents a problem, because the &lt;code&gt;rpmsign&lt;/code&gt;
command will always, always prompt for a password and read the response from
&lt;code&gt;/dev/tty&lt;/code&gt;. This means that (a) you can&amp;rsquo;t easily provide the password on stdin,
and (b) you can&amp;rsquo;t fix the problem using a passwordless key.&lt;/p&gt;</description></item></channel></rss>