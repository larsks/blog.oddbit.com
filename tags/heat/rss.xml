<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Heat on blog.oddbit.com</title><link>https://blog.oddbit.com/tags/heat/</link><description>Recent content in Heat on blog.oddbit.com</description><generator>Hugo</generator><language>en</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 16 Feb 2023 10:58:10 -0500</lastBuildDate><atom:link href="https://blog.oddbit.com/tags/heat/rss.xml" rel="self" type="application/rss+xml"/><item><title>Exploring YAQL Expressions</title><link>https://blog.oddbit.com/post/2016-08-11-exploring-yaql-expressions/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2016-08-11-exploring-yaql-expressions/</guid><description>&lt;p&gt;The Newton release of &lt;a href="https://wiki.openstack.org/wiki/Heat"&gt;Heat&lt;/a&gt; adds support for a &lt;a href="http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#yaql"&gt;yaql&lt;/a&gt;
intrinsic function, which allows you to evaluate &lt;a href="https://yaql.readthedocs.io/en/latest/"&gt;yaql&lt;/a&gt; expressions
in your Heat templates. Unfortunately, the existing yaql
documentation is somewhat limited, and does not offer examples of many
of yaql&amp;rsquo;s more advanced features.&lt;/p&gt;
&lt;p&gt;I am working on a &lt;a href="http://www.fluentd.org/"&gt;Fluentd&lt;/a&gt; composable service for &lt;a href="https://wiki.openstack.org/wiki/TripleO"&gt;TripleO&lt;/a&gt;. I
want to allow each service to specify a logging source configuration
fragment, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parameters:
 NovaAPILoggingSource:
 type: json
 description: Fluentd logging configuration for nova-api.
 default:
 tag: openstack.nova.api
 type: tail
 format: |
 /(?&amp;lt;time&amp;gt;\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d+) (?&amp;lt;pid&amp;gt;\d+) (?&amp;lt;priority&amp;gt;\S+) (?&amp;lt;message&amp;gt;.*)/
 path: /var/log/nova/nova-api.log
 pos_file: /var/run/fluentd/openstack.nova.api.pos
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This generally works, but several parts of this fragment are going to
be the same across all OpenStack services. I wanted to reduce the
above to just the unique attributes, which would look something like:&lt;/p&gt;</description></item><item><title>Heat-kubernetes Demo with Autoscaling</title><link>https://blog.oddbit.com/post/2015-06-19-heatkubernetes-demo-with-autos/</link><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2015-06-19-heatkubernetes-demo-with-autos/</guid><description>&lt;p&gt;Next week is the &lt;a href="http://www.redhat.com/summit/"&gt;Red Hat Summit&lt;/a&gt; in Boston, and I&amp;rsquo;ll be taking part
in a &lt;a href="http://www.projectatomic.io/"&gt;Project Atomic&lt;/a&gt; presentation in which I will discuss various
(well, two) options for deploying Atomic into an OpenStack
environment, focusing on my &lt;a href="https://github.com/projectatomic/heat-kubernetes/"&gt;heat-kubernetes&lt;/a&gt; templates.&lt;/p&gt;
&lt;p&gt;As part of that presentation, I&amp;rsquo;ve put together a short demonstration video:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tS5X0qi04ZU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;This shows off the autoscaling behavior available with recent versions
of these templates (and also serves as a very brief introduction to
working with Kubernetes).&lt;/p&gt;</description></item><item><title>Heat Hangout</title><link>https://blog.oddbit.com/post/2014-09-05-heat-hangout/</link><pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-05-heat-hangout/</guid><description>&lt;p&gt;I ran a Google Hangout this morning on &lt;a href="https://plus.google.com/events/c9u4sjn7ksb8jrmma7vd25aok94"&gt;Deploying with Heat&lt;/a&gt;. You
can find the slides for the presentation on line &lt;a href="http://oddbit.com/rdo-hangout-heat-intro/#/"&gt;here&lt;/a&gt;, and the
Heat templates (as well as slide sources) are available &lt;a href="https://github.com/larsks/rdo-hangout-heat-intro/"&gt;on
github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions about the presentation, please feel free to
ping me on irc (&lt;code&gt;larsks&lt;/code&gt;).&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qH-qYE1Kmpg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Visualizing Heat stacks</title><link>https://blog.oddbit.com/post/2014-09-02-visualizing-heat-stacks/</link><pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-02-visualizing-heat-stacks/</guid><description>&lt;p&gt;I spent some time today learning about Heat &lt;a href="https://wiki.openstack.org/wiki/Heat/AutoScaling"&gt;autoscaling groups&lt;/a&gt;,
which are incredibly nifty but a little opaque from the Heat command
line, since commands such as &lt;code&gt;heat resource-list&lt;/code&gt; don&amp;rsquo;t recurse into
nested stacks. It is possible to introspect these resources (you can
pass the physical resource id of a nested stack to &lt;code&gt;heat resource-list&lt;/code&gt;, for example)&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;but I really like visualizing things, so I wrote a quick hack
called &lt;a href="http://github.com/larsks/dotstack"&gt;dotstack&lt;/a&gt; that will generate &lt;a href="http://en.wikipedia.org/wiki/DOT_%28graph_description_language%29"&gt;dot&lt;/a&gt; language output from a
Heat stack. You can process this with &lt;a href="http://www.graphviz.org/"&gt;Graphviz&lt;/a&gt; to produce output
like this, in which graph nodes are automatically colorized by
resource type:&lt;/p&gt;</description></item><item><title>Docker plugin bugs</title><link>https://blog.oddbit.com/post/2014-09-01-docker-plugin-bugs/</link><pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-09-01-docker-plugin-bugs/</guid><description>&lt;p&gt;This is a companion to my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for Heat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While writing that article, I encountered a number of bugs in the
Docker plugin and elsewhere. I&amp;rsquo;ve submitted patches for most of the
issues I encountered:&lt;/p&gt;
&lt;h2 id="bugs-in-the-heat-plugin"&gt;Bugs in the Heat plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364017"&gt;https://bugs.launchpad.net/heat/+bug/1364017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin fails to delete a container resource in
&lt;code&gt;CREATE_FAILED&lt;/code&gt; state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364041"&gt;https://bugs.launchpad.net/heat/+bug/1364041&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin &lt;code&gt;volumes_from&lt;/code&gt; parameter should be a list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/heat/&amp;#43;bug/1364039"&gt;https://bugs.launchpad.net/heat/+bug/1364039&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker plugin &lt;code&gt;volumes_from&lt;/code&gt; parameter results in an error&lt;/p&gt;</description></item><item><title>Annotated documentation for DockerInc::Docker::Container</title><link>https://blog.oddbit.com/post/2014-08-30-docker-contain-doc/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-docker-contain-doc/</guid><description>&lt;p&gt;This is a companion to my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for Heat&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dockerincdockercontainer"&gt;DockerInc::Docker::Container&lt;/h2&gt;
&lt;h3 id="properties"&gt;Properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt; : List&lt;/p&gt;
&lt;p&gt;Command to run after spawning the container.&lt;/p&gt;
&lt;p&gt;Optional property.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cmd: [ 'thttpd', '-C', '/etc/thttpd.conf', '-D', '-c', '*.cgi']
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dns&lt;/code&gt; : List&lt;/p&gt;
&lt;p&gt;Set custom DNS servers.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; dns:
 - 8.8.8.8
 - 8.8.4.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker_endopint&lt;/code&gt; : String&lt;/p&gt;
&lt;p&gt;Docker daemon endpoint. By default the local Docker daemon will
be used.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; docker_endpoint: tcp://192.168.1.100:2375
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; : String&lt;/p&gt;</description></item><item><title>Docker plugin for OpenStack Heat</title><link>https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/</guid><description>&lt;p&gt;I have been looking at both Docker and OpenStack recently. In my &lt;a href="https://blog.oddbit.com/post/2014-08-28-novadocker-and-environment-var/"&gt;last
post&lt;/a&gt; I talked a little about the &lt;a href="https://github.com/stackforge/nova-docker"&gt;Docker driver for Nova&lt;/a&gt;; in
this post I&amp;rsquo;ll be taking an in-depth look at the Docker plugin for
Heat, which has been available &lt;a href="https://blog.docker.com/2014/03/docker-will-be-in-openstack-icehouse/"&gt;since the Icehouse release&lt;/a&gt; but is
surprisingly under-documented.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://blog.docker.com/2014/03/docker-will-be-in-openstack-icehouse/"&gt;release announcement&lt;/a&gt; on the Docker blog includes an
example Heat template, but it is unfortunately grossly inaccurate and
has led many people astray. In particular:&lt;/p&gt;</description></item><item><title>Using wait conditions with Heat</title><link>https://blog.oddbit.com/post/2014-08-30-using-wait-conditions-with-hea/</link><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2014-08-30-using-wait-conditions-with-hea/</guid><description>&lt;p&gt;This post accompanies my &lt;a href="https://blog.oddbit.com/post/2014-08-30-docker-plugin-for-openstack-he/"&gt;article on the Docker plugin for
Heat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order for &lt;code&gt;WaitCondition&lt;/code&gt; resources to operate correctly in Heat, you
will need to make sure that that you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created the necessary Heat domain and administrative user in
Keystone,&lt;/li&gt;
&lt;li&gt;Configured appropriate values in &lt;code&gt;heat.conf&lt;/code&gt; for
&lt;code&gt;stack_user_domain&lt;/code&gt;, &lt;code&gt;stack_domain_admin&lt;/code&gt;, and
&lt;code&gt;stack_domain_admin_password&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Configured an appropriate value in &lt;code&gt;heat.conf&lt;/code&gt; for
&lt;code&gt;heat_waitcondition_server_url&lt;/code&gt;. On a single-system install this
will often be pointed by default at &lt;code&gt;127.0.0.1&lt;/code&gt;, which, hopefully for
obvious reasons, won&amp;rsquo;t be of any use to your Nova servers.&lt;/li&gt;
&lt;li&gt;Enabled the &lt;code&gt;heat-api-cfn&lt;/code&gt; service,&lt;/li&gt;
&lt;li&gt;Configured your firewall to permit access to the CFN service (which
runs on port 8000).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Steve Hardy has a blog post on &lt;a href="http://hardysteven.blogspot.co.uk/2014/04/heat-auth-model-updates-part-2-stack.html"&gt;stack domain users&lt;/a&gt; that goes into
detail on configuring authentication for Heat and Keystone.&lt;/p&gt;</description></item><item><title>An introduction to OpenStack Heat</title><link>https://blog.oddbit.com/post/2013-12-06-an-introduction-to-openstack-h/</link><pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-12-06-an-introduction-to-openstack-h/</guid><description>&lt;p&gt;&lt;a href="https://wiki.openstack.org/wiki/Heat"&gt;Heat&lt;/a&gt; is a template-based orchestration mechanism for use with
OpenStack. With Heat, you can deploy collections of resources &amp;ndash;
networks, servers, storage, and more &amp;ndash; all from a single,
parameterized template.&lt;/p&gt;
&lt;p&gt;In this article I will introduce Heat templates and the &lt;code&gt;heat&lt;/code&gt; command
line client.&lt;/p&gt;
&lt;h2 id="writing-templates"&gt;Writing templates&lt;/h2&gt;
&lt;p&gt;Because Heat began life as an analog of AWS &lt;a href="http://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;, it
supports the template formats used by the CloudFormation (CFN) tools.
It also supports its own native template format, called HOT (&amp;ldquo;Heat
Orchestration Templates&amp;rdquo;). In this article I will be using the HOT
template syntax, which is fully specified on &lt;a href="http://docs.openstack.org/developer/heat/template_guide/hot_spec.html"&gt;the OpenStack
website&lt;/a&gt;.&lt;/p&gt;</description></item></channel></rss>