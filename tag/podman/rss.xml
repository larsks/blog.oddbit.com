<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>podman on blog.oddbit.com</title><link>https://blog.oddbit.com/tag/podman/</link><description>Recent content in podman on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Mon, 08 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/podman/rss.xml" rel="self" type="application/rss+xml"/><item><title>Remediating poor PyPi performance with DevPi</title><link>https://blog.oddbit.com/post/2021-02-08-remediating-poor-pypi-performa/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2021-02-08-remediating-poor-pypi-performa/</guid><description>Performance of the primary PyPi service has been so bad lately that it&amp;rsquo;s become very disruptive. Tasks that used to take a few seconds will now churn along for 15-20 minutes or longer before completing, which is incredibly frustrating.
I first went looking to see if there was a PyPi mirror infrastructure, like we see with CPAN for Perl or CTAN for Tex (and similarly for most Linux distributions). There is apparently no such beast,</description><content>&lt;p>Performance of the primary PyPi service has been so bad lately that
it&amp;rsquo;s become very disruptive. Tasks that used to take a few seconds
will now churn along for 15-20 minutes or longer before completing,
which is incredibly frustrating.&lt;/p>
&lt;p>I first went looking to see if there was a PyPi mirror infrastructure,
like we see with &lt;a href="https://www.cpan.org/">CPAN&lt;/a> for Perl or &lt;a href="https://ctan.org/">CTAN&lt;/a> for Tex (and similarly
for most Linux distributions). There is apparently no such beast,&lt;/p>
&lt;p>I didn&amp;rsquo;t really want to set up a PyPi mirror locally, since the number
of packages I actually use is small vs. the number of packages
available. I figured there must be some sort of caching proxy
available that would act as a shim between me and PyPi, fetching
packages from PyPi and caching them if they weren&amp;rsquo;t already available
locally.&lt;/p>
&lt;p>I was previously aware of &lt;a href="https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories">Artifactory&lt;/a>, which I suspected (and
confirmed) was capable of this, but while looking around I came across
&lt;a href="https://www.devpi.net/">DevPi&lt;/a>, which unlike Artifactory is written exclusively for
managing Python packages. DevPi itself is hosted on PyPi, and the
documentation made things look easy to configure.&lt;/p>
&lt;p>After reading through their &lt;a href="https://devpi.net/docs/devpi/devpi/stable/+doc/quickstart-pypimirror.html">Quickstart: running a pypi mirror on your
laptop&lt;/a> documentation, I built a containerized service that would
be easy for me to run on my desktop, laptop, work computer, etc. You
can find the complete configuration at
&lt;a href="https://github.com/oddbit-dot-com/docker-devpi-server">https://github.com/oddbit-dot-com/docker-devpi-server&lt;/a>.&lt;/p>
&lt;p>I started with the following &lt;code>Dockerfile&lt;/code> (note I&amp;rsquo;m using
&lt;a href="https://podman.io/">podman&lt;/a> rather than Docker as my container runtime, but the
resulting image will work fine for either environment):&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM python:3.9
RUN pip install devpi-server devpi-web
WORKDIR /root
VOLUME /root/.devpi
COPY docker-entrypoint.sh /docker-entrypoint.sh
ENTRYPOINT [&amp;#34;sh&amp;#34;, &amp;#34;/docker-entrypoint.sh&amp;#34;]
CMD [&amp;#34;devpi-server&amp;#34;, &amp;#34;--host&amp;#34;, &amp;#34;0.0.0.0&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>This installs both &lt;code>devpi-server&lt;/code>, which provides the basic caching
for &lt;code>pip install&lt;/code>, as well as &lt;code>devpi-web&lt;/code>, which provides support for
&lt;code>pip search&lt;/code>.&lt;/p>
&lt;p>To ensure that things are initialized correctly when the container
start up, I&amp;rsquo;ve set the &lt;code>ENYTRYPOINT&lt;/code> to the following script:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/sh
if ! [ -f /root/.devpi/server ]; then
devpi-init
fi
exec &amp;#34;$@&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This will run &lt;code>devpi-init&lt;/code> if the target directory hasn&amp;rsquo;t already been
initialized.&lt;/p>
&lt;p>The repository includes a &lt;a href="https://github.com/oddbit-dot-com/docker-devpi-server/blob/master/.github/workflows/build_docker_image.yml">GitHub workflow&lt;/a> that builds a new image on each commit
and pushes the result to the &lt;code>oddbit/devpi-server&lt;/code> repository on
Docker Hub.&lt;/p>
&lt;p>Once the image was available on Docker Hub, I created the following
systemd unit to run the service locally:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Service]
Restart=on-failure
ExecStartPre=/usr/bin/rm -f %t/%n-pid
ExecStart=/usr/bin/podman run --replace \
--conmon-pidfile %t/%n-pid --cgroups=no-conmon \
--name %n -d -p 127.0.0.1:3141:3141 \
-v devpi:/root/.devpi oddbit/devpi-server
ExecStopPost=/usr/bin/rm -f %t/%n-pid
PIDFile=%t/%n-pid
Type=forking
[Install]
WantedBy=multi-user.target default.target
&lt;/code>&lt;/pre>&lt;p>There are a couple items of note in this unitfile:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The service is exposed only on &lt;code>localhost&lt;/code> using &lt;code>-p 127.0.0.1:3141:3141&lt;/code>. I don&amp;rsquo;t want this service exposed on
externally visible addresses since I haven&amp;rsquo;t bothered setting up any
sort of authentication.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The service mounts a named volume for use by &lt;code>devpi-server&lt;/code> via the
&lt;code>-v devpi:/root/.devpi&lt;/code> command line option.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>This unit file gets installed into
&lt;code>~/.config/systemd/user/devpi.service&lt;/code>. Running &lt;code>systemctl --user enable --now devpi.service&lt;/code> both enables the service to start at boot
and actually starts it up immediately.&lt;/p>
&lt;p>With the service running, the last thing to do is configure &lt;code>pip&lt;/code> to
utilize it. The following configuration, placed in
&lt;code>~/.config/pip/pip.conf&lt;/code>, does the trick:&lt;/p>
&lt;pre tabindex="0">&lt;code>[install]
index-url = http://localhost:3141/root/pypi/+simple/
[search]
index = http://localhost:3141/root/pypi/
&lt;/code>&lt;/pre>&lt;p>Now both &lt;code>pip install&lt;/code> and &lt;code>pip search&lt;/code> hit the local cache instead of
the upstream PyPi server, and things are generally much, much faster.&lt;/p>
&lt;h2 id="for-poetry-users">For Poetry Users&lt;/h2>
&lt;p>&lt;a href="https://python-poetry.org/">Poetry&lt;/a> respects the &lt;code>pip&lt;/code> configuration and will Just Work.&lt;/p>
&lt;h2 id="for-pipenv-users">For Pipenv Users&lt;/h2>
&lt;p>&lt;a href="https://github.com/pypa/pipenv">Pipenv&lt;/a> does not respect the pip configuration [&lt;a href="https://github.com/pypa/pipenv/issues/1451">1&lt;/a>,
&lt;a href="https://github.com/pypa/pipenv/issues/2075">2&lt;/a>], so you will
need to set the &lt;code>PIPENV_PYPI_MIRROR&lt;/code> environment variable. E.g:&lt;/p>
&lt;pre tabindex="0">&lt;code>export PIPENV_PYPI_MIRROR=http://localhost:3141/root/pypi/+simple/
&lt;/code>&lt;/pre></content></item></channel></rss>