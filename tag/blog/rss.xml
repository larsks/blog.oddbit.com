<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog on blog.oddbit.com</title><link>https://blog.oddbit.com/tag/blog/</link><description>Recent content in blog on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Fri, 22 Nov 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title>Automatic maintenance of tag feeds</title><link>https://blog.oddbit.com/post/2013-11-22-automatic-maintenanc/</link><pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-22-automatic-maintenanc/</guid><description>I recently added some scripts to automatically generate tag feeds for my blog when pushing new content. I&amp;rsquo;m using GitHub Pages to publish everything, so it seemed easiest to make tag generation part of a pre-push hook (new in Git 1.8.2). This hook is run automatically as part of the git push operation, so it&amp;rsquo;s the perfect place to insert generated content that must be kept in sync with posts on the blog.</description><content>&lt;p>I recently added some scripts to automatically generate tag feeds for
my blog when pushing new content. I&amp;rsquo;m using GitHub Pages to publish
everything, so it seemed easiest to make tag generation part of a
&lt;code>pre-push&lt;/code> hook (new in Git 1.8.2). This hook is run automatically as
part of the &lt;code>git push&lt;/code> operation, so it&amp;rsquo;s the perfect place to insert
generated content that must be kept in sync with posts on the blog.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="keeping-things-in-sync">Keeping things in sync&lt;/h2>
&lt;p>The &lt;code>_posts&lt;/code> directory of my blog is a &lt;a href="http://git-scm.com/book/en/Git-Tools-Submodules">git submodule&lt;/a>, which means
it gets updated and pushed asynchronously with respect to the main
repository. We want to make sure that we don&amp;rsquo;t regenerate the tag
feeds if there are either uncomitted changes in &lt;code>_posts&lt;/code> &lt;em>or&lt;/em> if there
are &lt;em>unpushed&lt;/em> changes in &lt;code>_posts&lt;/code>: in either situation, we could
generate a tag feed for tags that weren&amp;rsquo;t actually used in any
published posts.&lt;/p>
&lt;p>The following checks for any uncomitted changes in &lt;code>_posts&lt;/code>:&lt;/p>
&lt;pre>&lt;code>if ! git diff-files --quiet _posts; then
echo &amp;quot;posts are out of sync (skipping tag maintenance)&amp;quot;
exit 0
fi
&lt;/code>&lt;/pre>
&lt;p>This will abort the tag feed generation if any of the following is
true:&lt;/p>
&lt;ul>
&lt;li>&lt;code>_posts&lt;/code> has uncomitted changes&lt;/li>
&lt;li>&lt;code>_posts&lt;/code> has new, untracked content&lt;/li>
&lt;li>&lt;code>_posts&lt;/code> is at a revision that differs from the last comitted
revision in the parent repository.&lt;/li>
&lt;/ul>
&lt;p>This still leaves one possible failure mode: if we commit all changes
in &lt;code>_posts&lt;/code>, and then commit the updated &lt;code>_posts&lt;/code> revision in the
parent repository, all of the previous checks will pass&amp;hellip;but since we
haven&amp;rsquo;t pushed the &lt;code>_posts&lt;/code> repository, we could still be pushing tags
that don&amp;rsquo;t match up with published posts.&lt;/p>
&lt;p>The following check will prevent this situation by checking if the
repository differs from the upstream branch:&lt;/p>
&lt;pre>&lt;code>if ! (cd _posts; git diff-index --quiet origin/posts); then
echo &amp;quot;posts are out of sync (skipping tag maintenance)&amp;quot;
exit 0
fi
&lt;/code>&lt;/pre>
&lt;h2 id="generating-tag-feeds">Generating tag feeds&lt;/h2>
&lt;p>In order to prevent stale tags, we need to delete and regenerate all
the tag feeds. Cleaning up the existing tag feeds is taken care of by
the &lt;code>cleantagfeeds&lt;/code> script:&lt;/p>
&lt;pre>&lt;code>echo &amp;quot;cleaning tag feeds&amp;quot;
_oddbit/cleantagfeeds
&lt;/code>&lt;/pre>
&lt;p>Which is really just a wrapper for the following &lt;code>find&lt;/code> commands:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
# Delete tag feeds unless there is a `.keep` file in the
# same directory.
find tag/* -name index.xml \
-execdir sh -c 'test -f .keep || rm -f index.xml' \;
find tag/* -type d -delete
&lt;/code>&lt;/pre>
&lt;p>This will preserve any tag feeds that have a corresponding &lt;code>.keep&lt;/code>
file (just in case we&amp;rsquo;ve done something special that requires manual
intervention) and deletes everything else.&lt;/p>
&lt;p>Generating the tag feeds is taken care of by the &lt;code>gentagfeeds&lt;/code>
script:&lt;/p>
&lt;pre>&lt;code>echo &amp;quot;generating tag feeds&amp;quot;
_oddbit/gentagfeeds
&lt;/code>&lt;/pre>
&lt;p>This is a Python program that iterates over all the files in &lt;code>_posts&lt;/code>,
reads in the YAML frontmatter from each one, and then generates a feed
file for each tag using a template.&lt;/p>
&lt;p>Finally, we need to add any changes to the repository. We
unilaterally add the &lt;code>tags/&lt;/code> directory:&lt;/p>
&lt;pre>&lt;code>git add -A tag
&lt;/code>&lt;/pre>
&lt;p>And then see if that got us anything:&lt;/p>
&lt;pre>&lt;code>if ! git diff-index --quiet HEAD -- tag; then
git commit -m 'automatic tag update' tag
fi
&lt;/code>&lt;/pre>
&lt;p>At this point, we&amp;rsquo;ve regenerated all the tag feeds and committed any
new or modified tag feeds to the repository, which will get published
to GitHub as part of the current &lt;code>push&lt;/code> operation.&lt;/p>
&lt;p>The actual feed templates look like this:&lt;/p>
&lt;pre>&lt;code>---
layout: rss
exclude: true
tags:
- {{tag}}
---
&lt;/code>&lt;/pre>
&lt;p>I&amp;rsquo;m using a modified version of &lt;a href="https://github.com/thedereck/gh-pages-blog/">gh-pages-blog&lt;/a> in which I have
modified &lt;code>_layouts/rss.xml&lt;/code> to optionally filter posts by tag using
the following template code:&lt;/p>
&lt;p>{% raw %}
.
.
.
{% for p in site.posts %}
{% if page contains &amp;rsquo;tags&amp;rsquo; %}
{% assign selected = false %}
{% for t in p.tags %}
{% if page.tags contains t %}
{% assign selected = true %}
{% endif %}
{% endfor %}&lt;/p>
&lt;pre>&lt;code> {% if selected == false %}
{% continue %}
{% endif %}
{% endif %}
.
.
.
&lt;/code>&lt;/pre>
&lt;p>{% endraw %}&lt;/p>
&lt;p>For each post on the site (&lt;code>site.posts&lt;/code>), this checks for any overlap
between the tags in the post and the tags selected in the tag feed.
While the automatic feeds use only a single tag, this also makes it
possible to create feeds that follow multiple tags.&lt;/p>
&lt;p>All of the code used to implement this is available in the &lt;a href="http://github.com/larsks/blog.oddbit.com/">GitHub
repository for this blog&lt;/a>.&lt;/p></content></item><item><title>Enabled blog comments</title><link>https://blog.oddbit.com/post/2013-11-18-enabled-comments/</link><pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-18-enabled-comments/</guid><description>I&amp;rsquo;ve enabled blog comments using Disqus. This is something of an experiment, since (a) I&amp;rsquo;m not really happy with how Disqus is handling user registration these days and (b) I don&amp;rsquo;t know that I have the time to moderate anything. But we&amp;rsquo;ll see.</description><content>&lt;p>I&amp;rsquo;ve enabled blog comments using &lt;a href="http://disqus.com/">Disqus&lt;/a>. This is something of an
experiment, since (a) I&amp;rsquo;m not really happy with how Disqus is handling
user registration these days and (b) I don&amp;rsquo;t know that I have the time
to moderate anything. But we&amp;rsquo;ll see.&lt;/p></content></item><item><title>Moving to GitHub</title><link>https://blog.oddbit.com/post/2013-11-13-moving-to-github/</link><pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2013-11-13-moving-to-github/</guid><description>This blog has been hosted on scriptogram for the past year or so. Unfortunately, while I like the publish-via-Dropbox mechanism, there have been enough problems recently that I&amp;rsquo;ve finally switched over to using GitHub Pages for hosting. I&amp;rsquo;ve been thinking about doing this for a while, but the things that finally pushed me to make the change were:
Sync problems that would prevent new posts from appearing (and that at least once caused posts to disappear).</description><content>&lt;p>This blog has been hosted on &lt;a href="http://scriptogr.am/">scriptogram&lt;/a> for the past year or so.
Unfortunately, while I like the publish-via-Dropbox mechanism, there
have been enough problems recently that I&amp;rsquo;ve finally switched over to
using &lt;a href="http://pages.github.com/">GitHub Pages&lt;/a> for hosting. I&amp;rsquo;ve been thinking about doing
this for a while, but the things that finally pushed me to make the
change were:&lt;/p>
&lt;ul>
&lt;li>Sync problems that would prevent new posts from appearing (and that
at least once caused posts to disappear).&lt;/li>
&lt;li>Lack of any response to bug reports by the site maintainers.&lt;/li>
&lt;/ul>
&lt;p>A benefit of the publish-via-Dropbox mechanism is, of course, that I
already had all the data and didn&amp;rsquo;t need to go through any sort of
export process.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="fixing-metadata">Fixing metadata&lt;/h2>
&lt;p>Like &lt;a href="http://scriptogr.am/">scriptogram&lt;/a>, &lt;a href="http://pages.github.com/">GitHub Pages&lt;/a> is also a Markdown-based
solution. GitHub uses &lt;a href="http://jekyllrb.com/">Jekyll&lt;/a> to render Markdown to HTML, which
requires some metadata at the beginning of each post. On
&lt;a href="http://scriptogr.am/">scriptogram&lt;/a> the file headers looked like this:&lt;/p>
&lt;pre>&lt;code>Title: A random collection of OpenStack Tools
Date: 2013-11-12
Tags: openstack
&lt;/code>&lt;/pre>
&lt;p>Whereas the corresponding header for GitHub would look like this:&lt;/p>
&lt;pre>&lt;code>---
layout: post
title: A random collection of OpenStack Tools
date: 2013-11-12
tags:
- openstack
---
&lt;/code>&lt;/pre>
&lt;p>I was able to generally automate this with the following script:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
for post in &amp;quot;$@&amp;quot;; do
sed -i '
1,/^$/ {
1 i\---
1 i\layout: post
s/Title:/title:/
s/Date:/date:/
s/Tags:/tags:/
/^$/ i\---
}
' $post
done
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>tags:&lt;/code> header need further processing to transform them into a
&lt;a href="http://en.wikipedia.org/wiki/YAML">YAML&lt;/a> list. That means something like:&lt;/p>
&lt;pre>&lt;code>tags: foo,bar,baz
&lt;/code>&lt;/pre>
&lt;p>Would need to end up looking like:&lt;/p>
&lt;pre>&lt;code>tags:
- foo
- bar
- baz
&lt;/code>&lt;/pre>
&lt;p>While that&amp;rsquo;s not entirely accurate &amp;ndash; YAML supports multiple list
syntaxes and I could have just expressed that as &lt;code>[foo,bar,baz]&lt;/code> &amp;ndash; I
prefer this extended syntax and got there via the following &lt;code>awk&lt;/code>
script:&lt;/p>
&lt;pre>&lt;code>BEGIN {state=0}
state == 1 &amp;amp;&amp;amp; /^tags:/ {
tags=$2
next
}
state == 1 &amp;amp;&amp;amp; /^---$/ {
if (tags) {
split(tags, taglist, &amp;quot;,&amp;quot;)
print &amp;quot;tags:&amp;quot;
for (t in taglist)
print &amp;quot; -&amp;quot;, taglist[t]
}
state=2
}
state == 0 &amp;amp;&amp;amp; /^---$/ { state=1 }
{print}
&lt;/code>&lt;/pre>
&lt;p>(This would process a single post; I wrapped it in a shell script to
run it across all the posts.)&lt;/p>
&lt;h1 id="redirecting-legacy-links">Redirecting legacy links&lt;/h1>
&lt;p>In order to preserve links pointing at the old blog I needed to generate
a bunch of HTML redirect files. &lt;a href="http://scriptogr.am/">Scriptogram&lt;/a> posts had permalinks
of the form &lt;code>/post/&amp;lt;slug&amp;gt;&lt;/code>, where &lt;code>&amp;lt;slug&amp;gt;&lt;/code> was computed from the post
aliases: [&amp;quot;/2013/11/13/moving-to-github/&amp;quot;]
title. GitHub posts (with &lt;code>permalinks: pretty&lt;/code>) have the form
&lt;code>/&amp;lt;year&amp;gt;/&amp;lt;month&amp;gt;/&amp;lt;day&amp;gt;/&amp;lt;title&amp;gt;&lt;/code>, where &lt;code>&amp;lt;title&amp;gt;&lt;/code> comes from the
filename rather than the post metadata.&lt;/p>
&lt;p>I automated the generation of redirects with the following script:&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
for post in _posts/*; do
# read the title from the post metadata
title=$(grep '^title:' $post)
title=${title/title: /}
# convert the title from the metadata into the slug
# used by scriptogram
slug=${title,,}
slug=${slug// /-}
slug=${slug//[.,:?\/\'\&amp;quot;]/}
# parse the post filename into year, month, day, and title
# as used by github
post_name=${post/_posts\//}
post_date=${post_name:0:10}
post_title=${post_name:11}
post_title=${post_title:0:$(( ${#post_title} - 3))}
post_year=${post_date%%-*}
tmp=${post_date#*-}
post_month=${tmp%%-*}
post_day=${post_date##*-}
# the url at which the post is available on github
new_url=&amp;quot;/$post_year/$post_month/$post_day/$post_title/&amp;quot;
# generate the html redirect file
mkdir -p post/$slug
sed &amp;quot;s|URL|$new_url|g&amp;quot; redirect.html &amp;gt; post/$slug/index.html
done
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>redirect.html&lt;/code> looks like this:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;URL&amp;quot;/&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=URL&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>So given a file &lt;code>_posts/2013-11-12-a-random-collection.md&lt;/code>, this would
result in a new file
&lt;code>post/a-random-collection-of-openstack-tools/index.html&lt;/code> with the
following content:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;/2013/11/12/a-random-collection/&amp;quot;/&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=https://blog.oddbit.com/2013/11/12/a-random-collection/&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>With this in place, a URL such as &lt;a href="http://blog.oddbit.com/post/a-random-collection-of-openstack-tools">http://blog.oddbit.com/post/a-random-collection-of-openstack-tools&lt;/a> goes to the right place.&lt;/p>
&lt;p>&lt;strong>Update&lt;/strong>: It turns out that it has been almost exactly a year since
I &lt;a href="http://blog.oddbit.com/2012/11/06/moving-from-blogger/">moved from Blogger to Scriptogram&lt;/a>.&lt;/p></content></item></channel></rss>