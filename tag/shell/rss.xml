<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on blog.oddbit.com</title><link>https://blog.oddbit.com/tag/shell/</link><description>Recent content in shell on blog.oddbit.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Lars Kellogg-Stedman</copyright><lastBuildDate>Thu, 08 Feb 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/shell/rss.xml" rel="self" type="application/rss+xml"/><item><title>Listing iptables rules with line numbers</title><link>https://blog.oddbit.com/post/2018-02-08-listing-iptables-rules-with-li/</link><pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.oddbit.com/post/2018-02-08-listing-iptables-rules-with-li/</guid><description>You can list iptables rules with rule numbers using the --line-numbers option, but this only works in list (-L) mode. I find it much more convenient to view rules using the output from iptables -S or iptables-save.
You can augment the output from these commands with rule numbers with the following awk script:
#!/bin/awk -f state == 0 &amp;amp;&amp;amp; /^-A/ {state=1; chain=$2; counter=1; printf &amp;quot;\n&amp;quot;} state == 1 &amp;amp;&amp;amp; $2 !</description><content>&lt;p>You can list &lt;code>iptables&lt;/code> rules with rule numbers using the
&lt;code>--line-numbers&lt;/code> option, but this only works in list (&lt;code>-L&lt;/code>) mode. I
find it much more convenient to view rules using the output from
&lt;code>iptables -S&lt;/code> or &lt;code>iptables-save&lt;/code>.&lt;/p>
&lt;p>You can augment the output from these commands with rule numbers with
the following &lt;code>awk&lt;/code> script:&lt;/p>
&lt;pre>&lt;code>#!/bin/awk -f
state == 0 &amp;amp;&amp;amp; /^-A/ {state=1; chain=$2; counter=1; printf &amp;quot;\n&amp;quot;}
state == 1 &amp;amp;&amp;amp; $2 != chain {chain=$2; counter=1; printf &amp;quot;\n&amp;quot;}
!/^-A/ {state=0}
state == 1 {printf &amp;quot;[%03d] %s\n&amp;quot;, counter++, $0}
state == 0 {print}
&lt;/code>&lt;/pre>
&lt;p>This will produce output along the lines of:&lt;/p>
&lt;pre>&lt;code>-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-ISOLATION
-N LARS
[001] -A INPUT -i virbr1 -p udp -m udp --dport 53 -j ACCEPT
[002] -A INPUT -i virbr1 -p tcp -m tcp --dport 53 -j ACCEPT
[003] -A INPUT -i virbr1 -p udp -m udp --dport 67 -j ACCEPT
[004] -A INPUT -i virbr1 -p tcp -m tcp --dport 67 -j ACCEPT
[005] -A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT
[006] -A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT
[007] -A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT
[008] -A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT
[001] -A FORWARD -j DOCKER-ISOLATION
[002] -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
[003] -A FORWARD -o docker0 -j DOCKER
[004] -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
[005] -A FORWARD -i docker0 -o docker0 -j ACCEPT
[001] -A DOCKER-ISOLATION -i br-c9ab3aa72e98 -o docker0 -j DROP
[002] -A DOCKER-ISOLATION -i docker0 -o br-c9ab3aa72e98 -j DROP
[003] -A DOCKER-ISOLATION -i br-74ee392a7301 -o docker0 -j DROP
[004] -A DOCKER-ISOLATION -i docker0 -o br-74ee392a7301 -j DROP
[005] -A DOCKER-ISOLATION -i br-6b5fa040c423 -o docker0 -j DROP
[006] -A DOCKER-ISOLATION -i docker0 -o br-6b5fa040c423 -j DROP
[007] -A DOCKER-ISOLATION -i br-438e4f71d66d -o docker0 -j DROP
[008] -A DOCKER-ISOLATION -i docker0 -o br-438e4f71d66d -j DROP
&lt;/code>&lt;/pre>
&lt;p>That makes it much easier if you&amp;rsquo;re trying to insert or delete rules
by index (as in &lt;code>iptables -I INPUT 7 ...&lt;/code>). I keep the awk code itself
in a script named &lt;code>number-rules&lt;/code> so that running it locally usually
looks like:&lt;/p>
&lt;pre>&lt;code># iptables -S | number-rules | less
&lt;/code>&lt;/pre></content></item></channel></rss>